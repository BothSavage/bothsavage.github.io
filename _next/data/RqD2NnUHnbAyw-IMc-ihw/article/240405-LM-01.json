{"pageProps":{"NOTION_CONFIG":{"AUTHOR":"Both Savage","BIO":"talk is cheap","TITLE":"Both Savage","DESCRIPTION":"talk is cheap","LINK":"https://bothsavage.github.io/","THEME":"gitbook","CAN_COPY":"true","SINCE":"2024","CONTACT_EMAIL":"bothsavage@163.com","CUSTOM_MENU":"true","CUSTOM_RIGHT_CLICK_CONTEXT_MENU":"false","LANG":"en-US","THEME_SWITCH":"true","POST_SHARE_BAR_ENABLE":"true"},"notice":null,"siteInfo":{"title":"Both Savage","description":"一个NotionNext搭建的博客","pageCover":"https://www.notion.so/images/page-cover/nasa_robert_stewart_spacewalk_2.jpg","icon":"https://www.notion.so/image/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2Feb3e1328-8f32-4ff5-8d18-8ea80020e175%2Fc5ebdc5a-c3fd-403e-906b-17d64db6d01f%2Ffavicon.ico?table=collection&id=3c6ddc29-47df-43f6-a375-de1c3a9cf466&t=3c6ddc29-47df-43f6-a375-de1c3a9cf466&width=800"},"allNavPages":[{"id":"2caa6a98-fd82-4de7-838f-e08dfe6649ab","title":"万里长征-03-搜狐","pageCoverThumbnail":"","category":"万里长征","tags":["面试"],"summary":"搜狐面试题","slug":"article/240429-LM-fox","pageIcon":"🗒️","lastEditedDate":"2024-05-25T02:20:00.057Z"},{"id":"146219e7-c178-4485-b223-22f4b977333c","title":"Prometheus+Grafana多方位监控","pageCoverThumbnail":"https://source.unsplash.com/random?t=146219e7-c178-4485-b223-22f4b977333c","category":"技术分享","tags":["推荐","运维"],"summary":"包含linux主机监控+nginx监控+es监控+rabbitMQ监控+redis监控+Java程序监控","slug":"article/240429-prometheus","pageIcon":"🗒️","lastEditedDate":"2024-04-29T03:07:56.545Z"},{"id":"71879fde-4992-4276-9767-ac5bd71e4058","title":"Nginx配置备忘录","pageCoverThumbnail":"https://source.unsplash.com/random?t=71879fde-4992-4276-9767-ac5bd71e4058","category":"技术分享","tags":["运维","工具"],"summary":"nginx密码访问,prometheus,安全限制等","slug":"article/240425-nginx","pageIcon":"🗒️","lastEditedDate":"2024-04-24T16:37:04.342Z"},{"id":"9a78ba09-76ce-4344-bad5-f6d60dc0680e","title":"万里长征-02-跟谁学","pageCoverThumbnail":"https://source.unsplash.com/random?t=9a78ba09-76ce-4344-bad5-f6d60dc0680e","category":"万里长征","tags":["面试","文字"],"summary":"跟谁学面试题","slug":"article/240408-LM-02","pageIcon":"🗒️","lastEditedDate":"2024-04-08T17:08:09.011Z"},{"id":"63830328-e0f0-477a-b327-bc4ab921f89c","title":"万里长征-01-贝壳","pageCoverThumbnail":"https://source.unsplash.com/random?t=63830328-e0f0-477a-b327-bc4ab921f89c","category":"万里长征","tags":["面试"],"summary":"贝壳面试题","slug":"article/240405-LM-01","pageIcon":"🗒️","lastEditedDate":"2024-04-08T06:03:22.365Z"},{"id":"4d955058-b605-46cf-b242-1535b732af30","title":"万里长征","pageCoverThumbnail":"","category":"万里长征","tags":["面试","推荐"],"summary":"常见面试题汇总","slug":"article/240405-LM","pageIcon":"🗒️","lastEditedDate":"2024-04-07T09:23:11.250Z"},{"id":"1b09c4fb-e51e-4b6f-96ea-d7a92ef051d9","title":"Java程序CPU异常监控bash脚本","pageCoverThumbnail":"https://source.unsplash.com/random?t=1b09c4fb-e51e-4b6f-96ea-d7a92ef051d9","category":"技术分享","tags":["运维","linux","脚本","工具"],"summary":"极其简单的监控例子","slug":"article/240405-cpu","pageIcon":"🗒️","lastEditedDate":"2024-04-05T12:17:00.259Z"},{"id":"e8fd9138-663d-415d-9684-24343fb3248f","title":"mac体验ollama本地大模型","pageCoverThumbnail":"https://source.unsplash.com/random?t=e8fd9138-663d-415d-9684-24343fb3248f","category":"技术分享","tags":["工具","推荐","折腾"],"summary":"m1 pro芯片+32g体验了五种大模型本地部署","slug":"article/240325-ollama","pageIcon":"🗒️","lastEditedDate":"2024-03-26T05:49:00.447Z"},{"id":"e013510c-b3a7-4907-b4cd-118b118d30db","title":"Arthas简单使用备忘录","pageCoverThumbnail":"https://source.unsplash.com/random?t=e013510c-b3a7-4907-b4cd-118b118d30db","category":"技术分享","tags":["工具","开发","推荐"],"summary":"Arthas在排查Java应用线上问题的时候有大用处，并且可以是热部署工具，这里我推荐几个我常用的方法","slug":"article/240320-arthas","pageIcon":"🗒️","lastEditedDate":"2024-03-20T04:52:10.213Z"},{"id":"7e13a286-a275-4f48-b9d0-416c9b1368ce","title":"Xmrig挖矿入侵服务器排查","pageCoverThumbnail":"https://source.unsplash.com/random?t=7e13a286-a275-4f48-b9d0-416c9b1368ce","category":"技术分享","tags":["建站","推荐","开发"],"summary":"叮咚！阿里云提示你，你的服务器正在被攻击！","slug":"article/240319-xmrig","pageIcon":"🗒️","lastEditedDate":"2024-03-19T17:15:42.884Z"},{"id":"38e3f997-dad9-46b8-99bb-d3042488821f","title":"Java部署脚本&重启备份检查&配置环境","pageCoverThumbnail":"https://source.unsplash.com/random?t=38e3f997-dad9-46b8-99bb-d3042488821f","category":"技术分享","tags":["推荐","工具","自动化","微服务"],"summary":"微服务jar包越来越多,每次手动上线的时候都要运行一大堆命令,并且每个人备份的jar包名称目录都不一样。故写了一个脚本规定死流程,并且把脚本配置到环境变量做自动补全。","slug":"article/240124-deploy","pageIcon":"🗒️","lastEditedDate":"2024-01-24T07:18:46.139Z"},{"id":"026c5c21-3604-4c0a-a13c-ccb9208e4815","title":"解决SkyWalking在gateway中logback链路丢失","pageCoverThumbnail":"https://source.unsplash.com/random?t=026c5c21-3604-4c0a-a13c-ccb9208e4815","category":"技术分享","tags":["推荐","开发","日志","微服务","spring","skywalking"],"summary":"一年半以前，公司就从单体应用逐步迁移到微服务管理。奈何业务绑定太深，一直在两边混合开发。由于迁移到微服务的进程完成了一大半了，之前在单体项目中打的链路追踪就不太好用了。随即想到了SkyWalking，随即发现了一个大坑，那就是在gateway组件中logback日志会丢失TraceId，网上搜了一圈都没有解决问题，我又跑到SkyWalking的issue中搜了一大圈，发现大佬以下回答，还是得自己想办法。","slug":"article/240121-skywaking","pageIcon":"🗒️","lastEditedDate":"2024-01-20T18:52:32.627Z"},{"id":"ce6b6618-a118-4ee9-b74c-33a848d0f0ed","title":"Notion文章自动同步GitPage","pageCoverThumbnail":"https://images.unsplash.com/photo-1511379938547-c1f69419868d?ixlib=rb-4.0.3&q=50&fm=webp&crop=entropy&cs=srgb&t=ce6b6618-a118-4ee9-b74c-33a848d0f0ed&width=800&fmt=webp","category":"技术分享","tags":["建站","推荐","工具","docker","自动化","折腾","git"],"summary":"之前一直使用GitPage+typora+hexo来做文章分享管理，奈何真的麻烦坚持不下去了。Notion是我一直在使用的笔记软件，为了更好的使用Notion我还去看了许多文章。现在Notion已经是我生活的一部分了。最近发现NotionNext，但需要Vercel部署，还需要自己映射域名。所以想着用xx.github.io域名，优雅又方便","slug":"article/240119-notion","pageIcon":"📗","lastEditedDate":"2024-03-19T17:14:00.935Z"},{"id":"d3216be6-1b27-40e7-8677-7404896b7eb6","title":"示例文章","pageCoverThumbnail":"https://images.unsplash.com/photo-1511379938547-c1f69419868d?ixlib=rb-4.0.3&q=50&fm=webp&crop=entropy&cs=srgb&t=d3216be6-1b27-40e7-8677-7404896b7eb6&width=800&fmt=webp","category":"心情随笔","tags":["建站","文字","推荐"],"summary":"这是示例的文章摘要，摘要内容可被用做搜索，预览。文章列表默认展示概要；若要在列表直接展示文章内容，可在blog.config.js中配置。","slug":"article/example","pageIcon":"🗓️","lastEditedDate":"2024-01-19T06:18:08.580Z"},{"id":"54d97ca6-33d5-40e6-8c8b-0ad4a4e9a0bf","title":"将进酒","pageCoverThumbnail":"https://images.unsplash.com/photo-1511379938547-c1f69419868d?ixlib=rb-4.0.3&q=50&fm=webp&crop=entropy&cs=srgb&t=54d97ca6-33d5-40e6-8c8b-0ad4a4e9a0bf&width=800&fmt=webp","category":"知行合一","tags":["建站","文字","推荐"],"summary":"这是示例的文章摘要，摘要内容可被用做搜索，预览。文章列表默认展示概要；若要在列表直接展示文章内容，可在blog.config.js中配置。","slug":"article/begin","pageIcon":"🗒️","lastEditedDate":"2024-04-06T03:31:44.998Z"}],"tagOptions":[{"id":"d9f66761-0396-4e80-be5c-2ab6c7f8ba86","name":"推荐","color":"red","count":10},{"id":"ee932bde-0023-446f-9bb4-17d2022121c9","name":"文字","color":"brown","count":3},{"id":"25b1074b-a3fa-49f5-82cd-a37d85c5666f","name":"工具","color":"pink","count":6},{"id":"1e90f00e-8f1b-4665-8e69-92f0791bde56","name":"开发","color":"pink","count":3},{"id":"2382b30f-9881-4a8b-ae7f-2d34979c4fb9","name":"建站","color":"brown","count":4},{"id":"50765df4-40d8-4098-a1b4-abf97b9ce1d2","name":"docker","color":"gray","count":1},{"id":"114a1313-d952-45e1-8bb5-8bf0b7d3c372","name":"自动化","color":"blue","count":2},{"id":"986f04d2-1cd1-4f47-84ba-2c692e069d93","name":"折腾","color":"purple","count":2},{"id":"88f6276a-b475-4a62-a2b6-438606516ec8","name":"git","color":"default","count":1},{"id":"11c42291-5274-44a7-94a3-f4af3382896b","name":"日志","color":"red","count":1},{"id":"e89abe8e-9228-48f8-8bb0-582d8343eb91","name":"微服务","color":"red","count":2},{"id":"c002f5d1-02d9-41b0-954e-6f6a5978b3e0","name":"spring","color":"purple","count":1},{"id":"9fb08037-26be-4513-a5b2-ada51bcfeb9c","name":"skywalking","color":"blue","count":1},{"id":"4db60a02-14cd-40e9-bf53-0f4c30547a4b","name":"运维","color":"gray","count":3},{"id":"bda76598-5cfc-492c-83ec-f17afb09b0c7","name":"linux","color":"orange","count":1},{"id":"c52cafb9-814a-4408-b23f-d195d9fb314a","name":"脚本","color":"orange","count":1},{"id":"531ca54d-1302-4bcf-83cc-b389e9d9a35e","name":"面试","color":"yellow","count":4}],"categoryOptions":[{"id":"a4dcd33a-34a7-4c33-b9c2-92d3a5248f06","name":"知行合一","color":"pink","count":1},{"id":"8282ff59-f160-40c3-ab7e-6e970a0a64d5","name":"技术分享","color":"purple","count":9},{"id":"edd604ab-fda7-4d9b-964a-e7de536c05a0","name":"心情随笔","color":"orange","count":1},{"id":"350fdef0-67f5-4e99-a661-24fd57c306be","name":"万里长征","color":"green","count":4}],"customNav":[{"icon":"fas fa-home","name":"主页","to":"//","target":"_self","show":true}],"customMenu":[{"id":"5263856d-837a-4f2d-bfc6-24cbff6c946c","icon":"fab fa-github","date":{"start_date":"2021-03-13"},"type":"Menu","slug":"https://github.com/BOTHSAVAGE","summary":"这是一个指向外部地址的单页","title":"Github","status":"Published","category":"","publishDate":1615593600000,"publishDay":"2021-3-13","lastEditedDate":"2024-01-18T16:12:17.114Z","lastEditedDay":"2024-1-19","fullWidth":false,"pageIcon":"","pageCover":"","pageCoverThumbnail":"","tagItems":[],"to":"https://github.com/BOTHSAVAGE","name":"Github","password":"","show":true,"target":"_blank"},{"id":"29e65d89-d04e-4ee3-9a9d-2f8856ed3055","icon":"fas fa-archive","date":{"start_date":"2023-03-23"},"type":"Menu","slug":"#","title":"往期整理","status":"Published","category":"","publishDate":1679529600000,"publishDay":"2023-3-23","lastEditedDate":"2024-01-18T16:12:17.113Z","lastEditedDay":"2024-1-19","fullWidth":false,"pageIcon":"","pageCover":"","pageCoverThumbnail":"","tagItems":[],"to":"#","name":"往期整理","password":"","show":true,"subMenus":[{"id":"d88da7cd-eebc-4c92-b9c3-53910376ab83","icon":"fas fa-clock-rotate-left","date":{"start_date":"2021-07-02"},"type":"SubMenu","slug":"/archive","title":"历史归档","status":"Published","category":"","publishDate":1625184000000,"publishDay":"2021-7-2","lastEditedDate":"2024-01-18T16:12:17.115Z","lastEditedDay":"2024-1-19","fullWidth":false,"pageIcon":"🗒️","pageCover":"","pageCoverThumbnail":"","tagItems":[],"to":"/archive","name":"历史归档","password":"","show":true},{"id":"7d039e15-c906-470d-b781-943032713368","icon":"fas fa-th","date":{"start_date":"2021-07-02"},"type":"SubMenu","slug":"/category","title":"文章分类","status":"Published","category":"","publishDate":1625184000000,"publishDay":"2021-7-2","lastEditedDate":"2024-01-18T16:12:17.114Z","lastEditedDay":"2024-1-19","fullWidth":false,"pageIcon":"🗒️","pageCover":"","pageCoverThumbnail":"","tagItems":[],"to":"/category","name":"文章分类","password":"","show":true},{"id":"e746c4ee-0327-4529-85ac-7059a10091d3","icon":"fas fa-tag","date":{"start_date":"2021-07-02"},"type":"SubMenu","slug":"/tag","title":"文章标签","status":"Published","category":"","publishDate":1625184000000,"publishDay":"2021-7-2","lastEditedDate":"2024-01-18T16:12:17.115Z","lastEditedDay":"2024-1-19","fullWidth":false,"pageIcon":"🗒️","pageCover":"","pageCoverThumbnail":"","tagItems":[],"to":"/tag","name":"文章标签","password":"","show":true}]}],"postCount":15,"latestPosts":[{"id":"2caa6a98-fd82-4de7-838f-e08dfe6649ab","date":{"start_date":"2024-04-29","date_format":"relative"},"type":"Post","category":"万里长征","slug":"article/240429-LM-fox","tags":["面试"],"summary":"搜狐面试题","title":"万里长征-03-搜狐","status":"Published","publishDate":1714348800000,"publishDay":"2024-4-29","lastEditedDate":"2024-05-25T02:20:00.057Z","lastEditedDay":"2024-5-25","fullWidth":false,"pageIcon":"🗒️","pageCover":"","pageCoverThumbnail":"","tagItems":[{"name":"面试","color":"yellow"}],"password":""},{"id":"146219e7-c178-4485-b223-22f4b977333c","date":{"start_date":"2024-04-29","date_format":"relative"},"type":"Post","category":"技术分享","slug":"article/240429-prometheus","tags":["推荐","运维"],"summary":"包含linux主机监控+nginx监控+es监控+rabbitMQ监控+redis监控+Java程序监控","title":"Prometheus+Grafana多方位监控","status":"Published","publishDate":1714348800000,"publishDay":"2024-4-29","lastEditedDate":"2024-04-29T03:07:56.545Z","lastEditedDay":"2024-4-29","fullWidth":false,"pageIcon":"🗒️","pageCover":"https://source.unsplash.com/random?t=146219e7-c178-4485-b223-22f4b977333c","pageCoverThumbnail":"https://source.unsplash.com/random?t=146219e7-c178-4485-b223-22f4b977333c","tagItems":[{"name":"推荐","color":"red"},{"name":"运维","color":"gray"}],"password":""},{"id":"71879fde-4992-4276-9767-ac5bd71e4058","date":{"start_date":"2024-04-25","date_format":"relative"},"type":"Post","category":"技术分享","slug":"article/240425-nginx","tags":["运维","工具"],"summary":"nginx密码访问,prometheus,安全限制等","title":"Nginx配置备忘录","status":"Published","publishDate":1714003200000,"publishDay":"2024-4-25","lastEditedDate":"2024-04-24T16:37:04.342Z","lastEditedDay":"2024-4-25","fullWidth":false,"pageIcon":"🗒️","pageCover":"https://source.unsplash.com/random?t=71879fde-4992-4276-9767-ac5bd71e4058","pageCoverThumbnail":"https://source.unsplash.com/random?t=71879fde-4992-4276-9767-ac5bd71e4058","tagItems":[{"name":"运维","color":"gray"},{"name":"工具","color":"pink"}],"password":""},{"id":"9a78ba09-76ce-4344-bad5-f6d60dc0680e","date":{"start_date":"2024-04-08","date_format":"relative"},"type":"Post","category":"万里长征","slug":"article/240408-LM-02","tags":["面试","文字"],"summary":"跟谁学面试题","title":"万里长征-02-跟谁学","status":"Published","publishDate":1712534400000,"publishDay":"2024-4-8","lastEditedDate":"2024-04-08T17:08:09.011Z","lastEditedDay":"2024-4-9","fullWidth":false,"pageIcon":"🗒️","pageCover":"https://source.unsplash.com/random?t=9a78ba09-76ce-4344-bad5-f6d60dc0680e","pageCoverThumbnail":"https://source.unsplash.com/random?t=9a78ba09-76ce-4344-bad5-f6d60dc0680e","tagItems":[{"name":"面试","color":"yellow"},{"name":"文字","color":"brown"}],"password":""},{"id":"63830328-e0f0-477a-b327-bc4ab921f89c","date":{"start_date":"2024-04-05","date_format":"relative"},"type":"Post","category":"万里长征","slug":"article/240405-LM-01","tags":["面试"],"summary":"贝壳面试题","title":"万里长征-01-贝壳","status":"Published","publishDate":1712275200000,"publishDay":"2024-4-5","lastEditedDate":"2024-04-08T06:03:22.365Z","lastEditedDay":"2024-4-8","fullWidth":false,"pageIcon":"🗒️","pageCover":"https://source.unsplash.com/random?t=63830328-e0f0-477a-b327-bc4ab921f89c","pageCoverThumbnail":"https://source.unsplash.com/random?t=63830328-e0f0-477a-b327-bc4ab921f89c","tagItems":[{"name":"面试","color":"yellow"}],"password":""},{"id":"4d955058-b605-46cf-b242-1535b732af30","date":{"start_date":"2024-04-05"},"type":"Post","category":"万里长征","slug":"article/240405-LM","tags":["面试","推荐"],"summary":"常见面试题汇总","title":"万里长征","status":"Published","publishDate":1712275200000,"publishDay":"2024-4-5","lastEditedDate":"2024-04-07T09:23:11.250Z","lastEditedDay":"2024-4-7","fullWidth":false,"pageIcon":"🗒️","pageCover":"","pageCoverThumbnail":"","tagItems":[{"name":"面试","color":"yellow"},{"name":"推荐","color":"red"}],"password":""}],"post":{"id":"63830328-e0f0-477a-b327-bc4ab921f89c","date":{"start_date":"2024-04-05","date_format":"relative"},"type":"Post","category":"万里长征","slug":"article/240405-LM-01","tags":["面试"],"summary":"贝壳面试题","title":"万里长征-01-贝壳","status":"Published","publishDate":1712275200000,"publishDay":"2024-4-5","lastEditedDate":"2024-04-08T06:03:22.365Z","lastEditedDay":"2024-4-8","fullWidth":false,"pageIcon":"🗒️","pageCover":"https://source.unsplash.com/random?t=63830328-e0f0-477a-b327-bc4ab921f89c","pageCoverThumbnail":"https://source.unsplash.com/random?t=63830328-e0f0-477a-b327-bc4ab921f89c","tagItems":[{"name":"面试","color":"yellow"}],"password":"","blockMap":{"block":{"63830328-e0f0-477a-b327-bc4ab921f89c":{"value":{"id":"63830328-e0f0-477a-b327-bc4ab921f89c","version":973,"type":"page","content":["987d7530-fe73-4613-8e8f-e99dacb4fbae","2bc93ec4-03c5-46c2-b25e-d9ca68f233e5","0302269d-0e3e-4e6f-a368-e18a3a2ec8e0","fa204a88-cdff-4565-a19c-6fe2d4ef75e7","ddbe6f06-0181-499c-ae06-9410681834fc","33494c72-d0a0-4a3d-bd5d-0a18e50f5f2d","6fb628fc-aa4e-4fc9-b457-065c29334753","0a3aac75-d167-4a04-b401-68fcc7365e79","02df3fbe-5154-41d4-9752-dba0be8ca026","d7d4a0ac-86f1-42b5-a2c8-40ec89538f94","193c077b-6ed4-4cbc-a38e-9b358df2dcef","a9ca73a2-ae58-48dd-9ecb-d209d8f3e935","23abe9db-9241-43c9-ae12-3ab81e157c64","ea928a14-9976-4722-a5fd-9b4855a3b57e","5b8b909d-b557-4e7b-abd6-92915cfab912","2035b447-89c4-41f5-8dd3-d61fc43c2608","5825505c-b937-4885-84b3-87cf82f9ca91","01b775f9-c402-4653-8f07-52996a69d0a0","45913462-0b87-4118-b100-be7cc372a512","58f8202a-ad28-4a87-a983-4f8d39d514da","eb9d3a1f-f248-4a6e-aef1-45d671d6079d","c08ec9c8-1431-424a-a82d-446b6361fb10","e8167967-17d3-4317-9af8-e385a0d021be","cd0231c4-719c-4d6e-bf67-f16a6b670555","9997f489-a924-44f7-b989-d31f7addf6df","409d1819-249e-4544-b27a-b4f4ed746f39","2d0d08ce-bd8f-4f68-aa1b-bf61ea043b97","c80c5bd0-86b6-4bb5-a798-673aa4c939af","4ce569b2-d8c1-4cdc-959a-0680a67994c0","84a376d9-f5e0-492f-8754-845f99b03dcf","707824a3-8aa4-41c6-bd49-9022d6d5d778","4d90b249-0bb4-4096-bfa2-6507b9c8a31e","064c5e1c-dffe-45f4-9117-e43e50c909bd","138fbb54-b075-4d0d-9441-ab4d4e21ffef","aa23ef44-e8a0-47e2-a58a-c1297176bb95","80191352-3b19-4027-8053-320d264d6cfe","8fb1ac88-e13a-45a7-9557-a8580e890c4c","0edfbae9-636a-418a-b4a9-dcb6bd255746","499b2350-1b74-4204-a652-abef0cbf1c83","08b67ec1-f6dc-4d27-8179-01e34cb2ee4d","26f43f56-988b-4c11-8b83-55f7a0683c25","15d43009-caa0-4edd-83d0-6832b7d97cc8","989f2dd1-4c6c-4f1e-8d91-12258b3310aa","ce1cbe34-1f44-4ecb-95a0-f6a0a31b76a8","4924ea3c-f339-4a7c-9173-2eb7c6c3a7bc","5de62780-8f62-4de9-b165-d1ab2e0ee600","48a626ec-52c4-4994-accb-4feab9ce24ad","40ae3b73-8135-4715-85be-efc9ec2ad883","1ac8dbc8-7cbd-4519-8ad3-9c1557e960f5","e19cd5bc-571f-49ab-8fbc-fc08629f8cd5","1d79ce45-1106-4ab6-b13f-642ba2b2c52a","9d88c19c-3906-4462-8d0f-4f91525c6fde","d598224d-949c-4e30-bf97-c68dd43ff061","29b7c7ec-281f-4894-8449-70b098c4d366","70634efc-b1df-4cff-ae45-4569354ae08d","65662554-832e-4ed9-b000-f8018d2a93bf","2f3d7cc0-f08d-4bb0-b512-d95e7138a7a4","bf757fa2-6437-4d95-a797-63b2c01d5e12","a59676c7-c9ac-4ac6-b816-dfd7191aaeae","dcda87f4-bc3e-4b57-8bf6-04734ef2c649","65b73029-ad7d-4163-a67c-7b57247731be","50f34710-f078-4e6f-ae3d-5fbd0a817a91","18c829b6-60a3-46b9-ad60-2e8c1e96a819","0526de23-c671-4489-b1cb-268cbdc9e3bc","b93a19d3-623f-4ea6-85c3-319c527eafea","126cec14-65f5-440c-b9cc-6bf67871dae3","2b62d6b3-7b8b-4449-8d88-23d7a817b66d","be3a7323-5955-4d4b-95e0-c3f72bfb2b09","8f0098c7-7d59-48e1-8413-8d94f0c59329","b44e89e3-8079-41bb-8819-d64ecaa8b544","e6fde3ef-a4dc-495c-a344-1118e4532c98","e255a822-2445-4e80-bb1b-d935dbe47845","65f440df-5d66-406c-b3a0-c96b81e33d36","ab0f6036-0c9e-41eb-a2ec-812398a84be7","22927495-a3b1-4b11-bc6e-232a64df0c01","33187b3c-2107-4353-b805-38485abae444","d2264bd9-bbb6-4a93-b33b-22eaab7beba3","83ca355d-21d6-438f-9566-970bcb6c1ae7","92bc8af6-9bb6-4ac6-923f-260f36061597","385c3bdc-ea5e-4c02-bdbf-cf16e776d52c","053d1f64-ddf6-4c15-9bb9-3ee07c91ac49","6f08c7ba-0b0f-4d25-9216-9c43a7f77bcc","c630da5b-d0c9-4c73-ac22-3df2f41034aa","5d426dfa-6367-47dd-8aa0-c9dbdffe8c6e","bf63f719-0033-487f-bebe-aaaddca1ed7c","3a647354-19d2-4732-a497-4e387262d947","6f316220-c056-4271-9b4e-3106f7d4e88f","44ff0f50-5ad4-4bca-907d-2fefcb0e86aa","9dff64c2-3741-4851-814d-d1c1519fefda","62e2075c-ab42-41bb-99db-9bfc08161e48","42ee6ca8-71aa-461c-b80f-3da8c27b4436","f057295a-e996-4759-8408-9a72d156a9c7","6fb47951-6a64-4574-bb08-eaf19931a643","4f64b71e-c4c4-4e99-85fb-154ff17419af","fb44022a-b688-4772-bf81-ecae9ad72119","1b8d93b5-76b0-4596-b827-c42b6445cc89","6f8825de-b0d2-43f4-b1f6-b588dae2358a","43cf970f-42f2-4ac3-96fe-ce1472582942","2dd009f7-5f2b-4d20-9c1d-a14b63d2f763","d224bd21-57b0-45c8-bb92-54065bec0d4e","e325ba2b-10c4-4412-a6fc-6b4de66aa75e","2cd41ff5-a204-4f57-a87a-456eaa361660","809a6e51-51a5-449e-a534-e5862ff13cc1","8f7194ee-649d-4707-8447-5ac027e4baf8","874019b4-1345-4120-93de-425275ddd16d","a1fc850e-4ab3-4d59-bf00-e2e0b13bcd18","25b324d4-6f5a-4d91-acae-94bc933a62ae","7051ebe5-d874-4c7f-8e25-8784bb685110","8c7c2d9a-33d9-47f5-9ae1-6d9faa7f19de","87fcd96c-2934-4b99-abb8-c8c13df87891","ae3f1259-3d6b-4402-ac70-99b9b9e2064c","bd9c0378-a0d6-4b99-b749-94bb3b7be465","a489b769-3f06-4c63-8914-36558c6b3323","f5b9400e-67f1-4e59-988b-c68f527904a1","2f1cb9fe-5975-4ca6-a49b-6ac3c690aee3","994ca946-2457-49b1-a514-8163a4e98963","e4c4e8b5-0832-4419-b56f-6a5d98dc4b92","34a54259-c912-4e8b-8ae5-38faca4ea68e","e56e6aa1-c6f2-4063-a4fe-f4ac502049bc","6f3d4e9d-db7a-4106-8d59-959ca8afb6cc","b89168de-d942-48bd-a8e0-9443c8083eb7","c0283b95-d9ed-4afb-9d33-213a1ba8de7c","c0478f94-e2b5-4003-b190-2a26bccc83e4","df82e571-9bf7-40e9-adc1-9c2d119592a3","10da8870-dd5f-40e6-8bee-a048642ab34e","97e63c42-f48e-4301-bf7f-c2a29bc2a427","04e79f4a-3ff2-4cd4-874e-049da7999133","e3c38c8c-73f0-4030-b52d-f92bd0b74e14","e4310e1b-9fe3-4ba2-a5a4-fcabd8c3e8a7","8391f8e0-c28a-4e27-be95-5c2d02f5384a","b7b21474-7cae-4bbc-985a-e817143a02db","c30c7587-6292-4d8a-994d-0b631260225e","00fcfcaa-ae9c-4e08-999d-1710bf58f5a4","aede14bc-f845-44ec-94e4-7effcdaaf9ed","28bbc8ed-e2d7-4b87-8504-916aa6ff4e7a","eba70797-ef1c-48b4-b02b-8869bd85b211","f9b561c0-2b14-4824-a3b6-a2c4809eff36","e1eb809b-af82-4723-af64-c532810872ea","1137beea-f2c8-4cd9-8693-44a93692d434","f991032b-b60c-4ae9-8c9b-7d32949d2f7d","13531aff-c0c4-4cc7-8e1c-2eed1676410c","111b754e-7a75-473f-90b5-2db448844e12","5afed718-548d-45de-b28b-a46a9aa2e66b","648222d9-e9c4-4ed7-a08d-3d38f9059916","b0a02fbc-f4c6-46b5-b0c3-9c5a4b36ff14","76fc53b3-c188-4b2c-87ad-e2d6d26bbf3b","2ec16a82-a6f7-43ef-a884-a1e4f41b4da7","babaf346-e95d-4986-aa26-63e8a722e8e3","c3d119bb-2706-4412-aadf-1396bd9d9d61","981f9577-c11c-4f30-9f8c-b04717719062","1ee7c1f6-a405-4acd-8cf1-f3cb95af82aa","181040ac-e8a6-43bd-8319-63f756025176","5b6b1b35-50dd-4458-bbb8-bd0d849e83e2","c91fc763-ebeb-48bc-8860-2d91288bc4b9","af0f8549-1fed-4650-bded-b9bb221c9c4b","48c7d257-f510-443a-86b6-6247dabc5d54","c412884b-7870-45dd-a85e-3712521fecb2","55790aca-34e8-40a7-9d2a-a2c836cc108e","4ebead90-4ba0-4bbd-affa-838d137c0558","8318a2ff-315f-4878-afda-5d039731aa17","b4932eae-48b8-4bc8-9701-619f23c311cb","91224e1c-6b9f-4359-a38f-bc27e4afcf68","3fff129c-1117-4542-b74d-4216082349c1","1e79e7fc-1c9b-4f42-b4de-6200dd902330","2b7c4ded-eb4e-4989-b597-a7f15bfbc1f9","2ebb5714-fe8a-49dd-af34-0f2a183ca813","220f2229-574f-425e-a4d3-53280a83ecd6","702def13-5953-42b1-81ee-6d71058bc9e1","ae12cab0-c367-4874-a2a4-a90e2b449781","8e2d18d1-7da5-4e00-a06d-937e959c1f7f","3fc7d29d-036d-4fc8-a9a2-66dc3062ad2f","d75d5510-534f-4dbd-a03a-f7bfa8140882","5fa79268-046a-46e4-b1a9-445889e59825","8d9c9638-ed06-4d10-ab7e-99bb10cb5e02","3c442da6-7fa9-48ba-9bfd-202d119dcead","8bce32e8-78f8-442e-814c-327c9931cf38","407494ed-c9cf-4338-bc00-15789be41faf","ae0bc6d7-cb6f-464f-a49e-85370dc299f2","2a68b08c-2705-4b2f-9dc1-921f92f77441","01cfff21-e786-4686-be21-7baf28fdb9d9","daac458c-4d09-4bc7-b9dc-a7814d0d766d","3f183d14-7dca-4a22-9ab7-f5e2c82cae19","5d19c63f-c2a4-414a-80f2-db216a5d3fa4","4b26b44c-1854-4809-a711-aba6d7edd59e","456fdfde-bb2d-45da-906f-453d1a0a0408","b8f7f7c7-9b97-4113-bfce-e38edb0a8dbf","5abc3a42-0b85-421e-8275-364e1329278b","bd770ff4-40f3-4731-9e6f-e6ee9fa08fd9","a265558f-d19a-4027-bf58-db597e0821f1","96e98ae1-758a-4edd-990a-20e57dc88d56","559d843e-c38f-457f-9a3a-b013addb5358","da124448-3f64-4e39-930a-3c1bb34e6f93","ffb87317-1efc-4275-a207-98c224873242","5035a8d6-c052-4a61-86b3-97fffda749f5","24290ce7-4674-4d85-8b91-237589163392","5b42e21f-39be-4995-b9ab-932bda846ff4","40d6c976-ad3e-4c16-a7b9-db7c81ed61c5","ba812b10-ec82-4659-95be-64c7c3dd0679","311ac43b-4c0e-4d70-9b5a-de42107126e3","53a0914a-757f-47b8-8ea7-38da041281a1","81e93f64-ceec-4abb-ae75-5cff3959dc5d","b62318d2-b560-4d9d-96d3-e94c6b06cc78","7f4a3fab-c74c-428c-89ba-43137bb10cb7","7146a165-c3c3-4efd-838b-601e8643f55c","1413b7cb-5927-4f20-b160-39771f569d38","ca899d05-efde-4ce6-bdcb-98a0c6d29096","12748c2a-db4e-498f-835d-726826a93f3c","8bace18c-ec1d-40d4-9ee5-e3b380686397","1e324593-62b4-4a0e-a565-2bf69d4dc6f8","4edec3cd-49b4-4126-b098-0609bee2c2e5","6ea42de6-a4de-41e1-a041-7b46c38f0e2d","9e578a30-9fb1-4576-96ee-ae152f298c2b","70dcfb86-db56-4aef-896a-2fbf70b58a9b","4d584daa-14ac-4e9c-85d0-c133fec59503","676bf588-6f39-4f98-80f6-76fa817846a9","5b82e23c-c3a9-49ae-8327-5854869fd29f","9d783fb5-f77e-4fcb-bf77-67e14c1acfbe","be79a372-398f-4ff7-a218-d3970205a93b","834eea56-b6ff-4ad3-a74d-5cee91f0773c","01145d63-bbe5-43f9-a39d-1fc088ff79ed","c52bffb0-8001-4654-b0b3-75d6198b9d7c","4c359f4a-1ecb-408a-bfb1-be69a6db3ded","9aa0ad95-e940-4174-a98d-2b0a667730fa","e2e33cef-5ad5-4ca7-93c4-21cc283a25b9","4ffe24ce-ee7b-43f6-99fc-65df6af3ec63","f6515904-8e88-4d15-9397-f9c17e9cbf73","ffccf9aa-8cc1-4165-97e0-dd089cf8bb8e","685f6334-f314-4b13-93a7-0ab05c990939","775c6317-b272-4ff8-b863-9ba7ddf5c963","f0a53d9e-a460-4527-b030-c16c8cc6f19b","8757d938-7b43-4c38-95e8-c7ec1fc7a2e4","1392cc6d-45ac-48d6-b550-1ce3c2c8c24c","96e8deac-6e4c-449a-86ec-53e7f4bc6c20","8d99ce35-fbaa-45e9-a05a-f0567aba31d8","7f371d94-8eec-47c6-a856-8c062783c6b2","fc0a74bc-a96e-4d6f-971c-b5513c1462ee","0e56365b-5f4e-467a-8c3f-0b3efa1d307e","4069f7aa-52d2-4e1b-bace-27d77e694cf0","ccde5138-86f6-4b49-b355-b91c5873c1bd","bbdfee63-aff2-49c4-9fe9-4fcbd2e095ac","c9344dda-c117-4fb1-9b1a-094e94d4258f","9a7f8507-04ff-40b4-908a-d18bb90a9935","7898d291-822b-4935-a99c-bcab5e9c026c"],"format":{"page_font":"mono","page_icon":"🗒️","page_cover":"https://source.unsplash.com/random","block_locked":false,"block_locked_by":"e3bce58f-88e9-475b-8d52-370cf8e95e16","copied_from_pointer":{"id":"77f4d759-8660-4888-8d35-4214be459ba1","table":"block","spaceId":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"},"page_cover_position":0.5},"created_time":1712329957436,"last_edited_time":1712556202365,"parent_id":"3c6ddc29-47df-43f6-a375-de1c3a9cf466","parent_table":"collection","alive":true,"copied_from":"77f4d759-8660-4888-8d35-4214be459ba1","created_by_table":"notion_user","created_by_id":"e3bce58f-88e9-475b-8d52-370cf8e95e16","last_edited_by_table":"notion_user","last_edited_by_id":"e3bce58f-88e9-475b-8d52-370cf8e95e16","space_id":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"},"role":"comment_only"},"87ff73a8-1273-4f5f-96c1-cd1becb07207":{"value":{"id":"87ff73a8-1273-4f5f-96c1-cd1becb07207","type":"collection_view_page","content":["50fa88a0-6936-488c-8abc-b558b6a7b0d6","e027b6fc-d75a-43a9-92b1-d5872e5b0780","1fc93bf5-4631-4f85-90f5-362d6a9f69d5","4a3f60f2-b147-4303-b805-e3c775b287a5","c456b9e9-f33f-4c0f-a198-5e90d708c5e4","95d5d8be-c6d5-44e4-a06c-bbb8b5532918"],"view_ids":["8e40545c-4d1c-4299-8605-c04d7ab6872f","818d9fe2-a27d-40ec-b827-614939109ca4","ad494b39-a38c-415e-9221-325f0f9be280","58c6fb90-5030-4627-8bad-38b57c3253cd"],"collection_id":"3c6ddc29-47df-43f6-a375-de1c3a9cf466","format":{"block_locked":false,"block_locked_by":"27074aef-7216-41ed-baef-d9b53addd870","collection_pointer":{"id":"3c6ddc29-47df-43f6-a375-de1c3a9cf466","table":"collection","spaceId":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"},"copied_from_pointer":{"id":"19c33d8c-a320-4635-ab97-ddf00a96c478","table":"block","spaceId":"2a229231-539e-420a-9652-17ba8be4cd18"},"page_cover_position":0.6},"permissions":[{"role":"editor","type":"user_permission","user_id":"e3bce58f-88e9-475b-8d52-370cf8e95e16"},{"role":"comment_only","type":"public_permission","added_timestamp":1705594424869,"allow_duplicate":false,"allow_search_engine_indexing":true}],"created_time":1705594337173,"last_edited_time":1714377289490,"parent_id":"eb3e1328-8f32-4ff5-8d18-8ea80020e175","parent_table":"space","alive":true,"copied_from":"19c33d8c-a320-4635-ab97-ddf00a96c478"}},"987d7530-fe73-4613-8e8f-e99dacb4fbae":{"value":{"id":"987d7530-fe73-4613-8e8f-e99dacb4fbae","type":"table_of_contents","format":{"block_color":"gray","copied_from_pointer":{"id":"be61f37e-3882-4318-ad2b-2c61e18b529f","table":"block","spaceId":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"}},"created_time":1712329960849,"last_edited_time":1712329960849,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true,"copied_from":"be61f37e-3882-4318-ad2b-2c61e18b529f"}},"2bc93ec4-03c5-46c2-b25e-d9ca68f233e5":{"value":{"id":"2bc93ec4-03c5-46c2-b25e-d9ca68f233e5","type":"callout","properties":{"title":[["以下内容基于GPT-4模型"]]},"format":{"page_icon":"⚙","block_color":"gray_background","copied_from_pointer":{"id":"b9c647d4-ce71-49c8-9439-f7c95a69cd13","table":"block","spaceId":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"}},"created_time":1712457043814,"last_edited_time":1712457104614,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true,"copied_from":"b9c647d4-ce71-49c8-9439-f7c95a69cd13"}},"0302269d-0e3e-4e6f-a368-e18a3a2ec8e0":{"value":{"id":"0302269d-0e3e-4e6f-a368-e18a3a2ec8e0","type":"header","properties":{"title":[["问题"]]},"format":{"copied_from_pointer":{"id":"4b7fd301-ccb3-49e5-a655-951a4373ac77","table":"block","spaceId":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"}},"created_time":1712329960849,"last_edited_time":1712334509220,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true,"copied_from":"4b7fd301-ccb3-49e5-a655-951a4373ac77"}},"fa204a88-cdff-4565-a19c-6fe2d4ef75e7":{"value":{"id":"fa204a88-cdff-4565-a19c-6fe2d4ef75e7","type":"sub_header","properties":{"title":[["1.LeetCode199 二叉树右视图"]]},"created_time":1712330131553,"last_edited_time":1712556202365,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"ddbe6f06-0181-499c-ae06-9410681834fc":{"value":{"id":"ddbe6f06-0181-499c-ae06-9410681834fc","type":"bookmark","properties":{"link":[["https://leetcode.cn/problems/binary-tree-right-side-view/solutions/213494/er-cha-shu-de-you-shi-tu-by-leetcode-solution/"]],"title":[["199. 二叉树的右视图 - 力扣（LeetCode）"]],"description":[["199. 二叉树的右视图 - 给定一个二叉树的 根节点 root，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。     示例 1:  [https://assets.leetcode.com/uploads/2021/02/14/tree.jpg]   输入: [1,2,3,null,5,null,4] 输出: [1,3,4]   示例 2:   输入: [1,null,3] 输出: [1,3]   示例 3:   输入: [] 输出: []      提示:   * 二叉树的节点个数的范围是 [0,100]  * -100 <= Node.val <= 100"]]},"format":{"bookmark_icon":"https://leetcode.cn/favicon.ico","bookmark_cover":"https://static.leetcode-cn.com/cn-legacy-assets/images/LeetCode_Sharing.png"},"created_time":1712472023153,"last_edited_time":1712472023154,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"33494c72-d0a0-4a3d-bd5d-0a18e50f5f2d":{"value":{"id":"33494c72-d0a0-4a3d-bd5d-0a18e50f5f2d","type":"sub_header","properties":{"title":[["2.Dubbo跟SpringCloud区别"]]},"format":{"copied_from_pointer":{"id":"5e194ac0-9d6f-46f5-9eaf-c0db0f8aae46","table":"block","spaceId":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"}},"created_time":1712330131919,"last_edited_time":1712457945732,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true,"copied_from":"5e194ac0-9d6f-46f5-9eaf-c0db0f8aae46"}},"6fb628fc-aa4e-4fc9-b457-065c29334753":{"value":{"id":"6fb628fc-aa4e-4fc9-b457-065c29334753","type":"sub_sub_header","properties":{"title":[["GPT问答"]]},"created_time":1712458634936,"last_edited_time":1712472315803,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"0a3aac75-d167-4a04-b401-68fcc7365e79":{"value":{"id":"0a3aac75-d167-4a04-b401-68fcc7365e79","type":"quote","properties":{"title":[["Dubbo跟SpringCloud区别"]]},"created_time":1712457800462,"last_edited_time":1712458646329,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"02df3fbe-5154-41d4-9752-dba0be8ca026":{"value":{"id":"02df3fbe-5154-41d4-9752-dba0be8ca026","type":"text","properties":{"title":[["Dubbo和SpringCloud都是服务治理框架，它们都提供了服务注册、服务发现、负载均衡、熔断、降级等功能。但是它们的设计理念、使用场景、技术栈等方面有很大的不同。"]]},"created_time":1712457406977,"last_edited_time":1712457406982,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"d7d4a0ac-86f1-42b5-a2c8-40ec89538f94":{"value":{"id":"d7d4a0ac-86f1-42b5-a2c8-40ec89538f94","type":"numbered_list","properties":{"title":[["设计理念方面的不同："]]},"content":["a4b987d7-5961-4f6f-b710-fc6e9c6feb19","c81d6c27-7656-4fdc-a1f5-3b1d6a0fa18e"],"created_time":1712457406978,"last_edited_time":1712457406982,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"a4b987d7-5961-4f6f-b710-fc6e9c6feb19":{"value":{"id":"a4b987d7-5961-4f6f-b710-fc6e9c6feb19","type":"bulleted_list","properties":{"title":[["Dubbo：Dubbo是阿里巴巴开源的一款高性能、轻量级的Java"],[" RPC框架",[["b"]]],["，它的设计更倾向于提供一种通用的服务调用方式。Dubbo主张面向接口编程，服务提供者和服务消费者通过共享的接口进行通信，解耦了服务提供者和服务消费者。"]]},"created_time":1712457406977,"last_edited_time":1712457438305,"parent_id":"d7d4a0ac-86f1-42b5-a2c8-40ec89538f94","parent_table":"block","alive":true}},"c81d6c27-7656-4fdc-a1f5-3b1d6a0fa18e":{"value":{"id":"c81d6c27-7656-4fdc-a1f5-3b1d6a0fa18e","type":"bulleted_list","properties":{"title":[["SpringCloud：SpringCloud是一套"],["微服务解决方案",[["b"]]],["，它是基于SpringBoot提供的一系列框架，包括服务注册与发现、配置中心、消息总线、负载均衡、熔断器、数据监控等，可以快速地构建分布式系统。SpringCloud提倡的是面向RESTful服务的编程，每个微服务都是一个独立的RESTful服务，通过HTTP/HTTPS协议进行通信。"]]},"created_time":1712457406978,"last_edited_time":1712457441676,"parent_id":"d7d4a0ac-86f1-42b5-a2c8-40ec89538f94","parent_table":"block","alive":true}},"193c077b-6ed4-4cbc-a38e-9b358df2dcef":{"value":{"id":"193c077b-6ed4-4cbc-a38e-9b358df2dcef","type":"numbered_list","properties":{"title":[["技术栈方面的不同："]]},"content":["8aac3cf9-508d-496c-b8c4-622df6fed3da","44c3d9d4-5756-4d8c-ac2a-279e542f9be9"],"created_time":1712457406978,"last_edited_time":1712457406982,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"8aac3cf9-508d-496c-b8c4-622df6fed3da":{"value":{"id":"8aac3cf9-508d-496c-b8c4-622df6fed3da","type":"bulleted_list","properties":{"title":[["Dubbo：Dubbo使用的是"],["Zookeeper作为服务注册中心",[["b"]]],["，使用"],["Dubbo协议",[["b"]]],["进行通信，使用"],["Hessian进行序列化",[["b"]]],["。"]]},"created_time":1712457406978,"last_edited_time":1712457480193,"parent_id":"193c077b-6ed4-4cbc-a38e-9b358df2dcef","parent_table":"block","alive":true}},"44c3d9d4-5756-4d8c-ac2a-279e542f9be9":{"value":{"id":"44c3d9d4-5756-4d8c-ac2a-279e542f9be9","type":"bulleted_list","properties":{"title":[["SpringCloud：SpringCloud使用的是Eureka或Consul作为服务注册中心，使用HTTP/HTTPS协议进行通信，使用Jackson进行序列化。"]]},"created_time":1712457406978,"last_edited_time":1712457406982,"parent_id":"193c077b-6ed4-4cbc-a38e-9b358df2dcef","parent_table":"block","alive":true}},"a9ca73a2-ae58-48dd-9ecb-d209d8f3e935":{"value":{"id":"a9ca73a2-ae58-48dd-9ecb-d209d8f3e935","type":"numbered_list","properties":{"title":[["社区活跃度方面的不同："]]},"content":["59ca3f6d-6e20-4ebb-8bde-f02e8ba1e8a2","739665fd-1fb2-4d58-a128-bf47db90eb67"],"created_time":1712457406979,"last_edited_time":1712457406982,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"59ca3f6d-6e20-4ebb-8bde-f02e8ba1e8a2":{"value":{"id":"59ca3f6d-6e20-4ebb-8bde-f02e8ba1e8a2","type":"bulleted_list","properties":{"title":[["Dubbo：Dubbo的开发和维护主要由阿里巴巴的团队负责，社区活跃度相对较低。"]]},"created_time":1712457406978,"last_edited_time":1712457406982,"parent_id":"a9ca73a2-ae58-48dd-9ecb-d209d8f3e935","parent_table":"block","alive":true}},"739665fd-1fb2-4d58-a128-bf47db90eb67":{"value":{"id":"739665fd-1fb2-4d58-a128-bf47db90eb67","type":"bulleted_list","properties":{"title":[["SpringCloud：SpringCloud是由Pivotal公司开发和维护的，社区活跃度非常高。"]]},"created_time":1712457406979,"last_edited_time":1712457406982,"parent_id":"a9ca73a2-ae58-48dd-9ecb-d209d8f3e935","parent_table":"block","alive":true}},"23abe9db-9241-43c9-ae12-3ab81e157c64":{"value":{"id":"23abe9db-9241-43c9-ae12-3ab81e157c64","type":"numbered_list","properties":{"title":[["使用场景方面的不同："]]},"content":["1eccb6c9-f147-45a1-974b-fede5f785c2b","d5852595-9b56-47a5-a0e7-caf434129e36"],"created_time":1712457406979,"last_edited_time":1712457406982,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"1eccb6c9-f147-45a1-974b-fede5f785c2b":{"value":{"id":"1eccb6c9-f147-45a1-974b-fede5f785c2b","type":"bulleted_list","properties":{"title":[["Dubbo：Dubbo更适合在一个大型的、统一的系统中使用，比如一个大型的电商系统。"]]},"created_time":1712457406979,"last_edited_time":1712457406982,"parent_id":"23abe9db-9241-43c9-ae12-3ab81e157c64","parent_table":"block","alive":true}},"d5852595-9b56-47a5-a0e7-caf434129e36":{"value":{"id":"d5852595-9b56-47a5-a0e7-caf434129e36","type":"bulleted_list","properties":{"title":[["SpringCloud：SpringCloud更适合在微服务架构中使用，可以快速地构建和维护多个小型的、独立的服务。"]]},"created_time":1712457406979,"last_edited_time":1712457406982,"parent_id":"23abe9db-9241-43c9-ae12-3ab81e157c64","parent_table":"block","alive":true}},"ea928a14-9976-4722-a5fd-9b4855a3b57e":{"value":{"id":"ea928a14-9976-4722-a5fd-9b4855a3b57e","type":"text","properties":{"title":[["总结来说，Dubbo和SpringCloud各有优缺点，选择哪一个取决于项目的具体需求和场景。"]]},"created_time":1712457406979,"last_edited_time":1712457406982,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"5b8b909d-b557-4e7b-abd6-92915cfab912":{"value":{"id":"5b8b909d-b557-4e7b-abd6-92915cfab912","type":"divider","format":{"copied_from_pointer":{"id":"7db794ad-1695-41d1-9c4e-4f37b0f4f04e","table":"block","spaceId":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"}},"created_time":1712458530091,"last_edited_time":1712458530092,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true,"copied_from":"7db794ad-1695-41d1-9c4e-4f37b0f4f04e"}},"2035b447-89c4-41f5-8dd3-d61fc43c2608":{"value":{"id":"2035b447-89c4-41f5-8dd3-d61fc43c2608","type":"text","created_time":1712457807695,"last_edited_time":1712458533154,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"5825505c-b937-4885-84b3-87cf82f9ca91":{"value":{"id":"5825505c-b937-4885-84b3-87cf82f9ca91","type":"quote","properties":{"title":[["dubbo协议比较http协议，Hessian比较jackson"]]},"created_time":1712457762928,"last_edited_time":1712458322814,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"01b775f9-c402-4653-8f07-52996a69d0a0":{"value":{"id":"01b775f9-c402-4653-8f07-52996a69d0a0","type":"numbered_list","properties":{"title":[["Dubbo协议 vs HTTP协议"]]},"content":["fcc662ea-96fe-487d-993b-e6a8902ed1dc","486d38f4-1065-4f5b-8584-ffef4cb1d5d3"],"created_time":1712457713569,"last_edited_time":1712457713573,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"fcc662ea-96fe-487d-993b-e6a8902ed1dc":{"value":{"id":"fcc662ea-96fe-487d-993b-e6a8902ed1dc","type":"bulleted_list","properties":{"title":[["Dubbo协议是一种基于Netty的自定义RPC协议，它是面向服务的，二进制的，更侧重于服务间的高效调用，相比HTTP协议，Dubbo协议在网络传输效率上有优势。"]]},"created_time":1712457713569,"last_edited_time":1712457713573,"parent_id":"01b775f9-c402-4653-8f07-52996a69d0a0","parent_table":"block","alive":true}},"486d38f4-1065-4f5b-8584-ffef4cb1d5d3":{"value":{"id":"486d38f4-1065-4f5b-8584-ffef4cb1d5d3","type":"bulleted_list","properties":{"title":[["HTTP协议是一种基于TCP的应用层协议，它是面向资源的，文本的，提供了丰富的交互方法（如GET，POST，PUT，DELETE等），用途广泛，不仅可以用于服务间的调用，还可以用于浏览器和服务器的交互。"]]},"created_time":1712457713569,"last_edited_time":1712457713573,"parent_id":"01b775f9-c402-4653-8f07-52996a69d0a0","parent_table":"block","alive":true}},"45913462-0b87-4118-b100-be7cc372a512":{"value":{"id":"45913462-0b87-4118-b100-be7cc372a512","type":"numbered_list","properties":{"title":[["Hessian vs Jackson"]]},"content":["9b9a2d9e-f277-495e-bd1c-826644163b50","9c538c8f-ead1-4ddc-ab9d-4f9a32c5ea72"],"created_time":1712457713570,"last_edited_time":1712457713573,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"9b9a2d9e-f277-495e-bd1c-826644163b50":{"value":{"id":"9b9a2d9e-f277-495e-bd1c-826644163b50","type":"bulleted_list","properties":{"title":[["Hessian是一种轻量级的远程调用协议，它以二进制流的形式进行数据的序列化与反序列化，数据传输效率高。"]]},"created_time":1712457713570,"last_edited_time":1712457713573,"parent_id":"45913462-0b87-4118-b100-be7cc372a512","parent_table":"block","alive":true}},"9c538c8f-ead1-4ddc-ab9d-4f9a32c5ea72":{"value":{"id":"9c538c8f-ead1-4ddc-ab9d-4f9a32c5ea72","type":"bulleted_list","properties":{"title":[["Jackson是一种基于Java的库，用于将Java对象转换为JSON格式的数据，或者将JSON格式的数据转换为Java对象，主要用于Web开发，通过HTTP协议传输数据。"]]},"created_time":1712457713570,"last_edited_time":1712457713573,"parent_id":"45913462-0b87-4118-b100-be7cc372a512","parent_table":"block","alive":true}},"58f8202a-ad28-4a87-a983-4f8d39d514da":{"value":{"id":"58f8202a-ad28-4a87-a983-4f8d39d514da","type":"text","properties":{"title":[["总的来说，Dubbo协议和Hessian更适合用于服务间的高效调用，而HTTP协议和Jackson更适合用于Web开发，通过HTTP协议传输数据。选择哪一种取决于项目的具体需求和场景。"]]},"created_time":1712457713570,"last_edited_time":1712457713573,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"eb9d3a1f-f248-4a6e-aef1-45d671d6079d":{"value":{"id":"eb9d3a1f-f248-4a6e-aef1-45d671d6079d","type":"divider","format":{"copied_from_pointer":{"id":"7db794ad-1695-41d1-9c4e-4f37b0f4f04e","table":"block","spaceId":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"}},"created_time":1712458535771,"last_edited_time":1712458535783,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true,"copied_from":"7db794ad-1695-41d1-9c4e-4f37b0f4f04e"}},"c08ec9c8-1431-424a-a82d-446b6361fb10":{"value":{"id":"c08ec9c8-1431-424a-a82d-446b6361fb10","type":"text","created_time":1712458539819,"last_edited_time":1712458539819,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"e8167967-17d3-4317-9af8-e385a0d021be":{"value":{"id":"e8167967-17d3-4317-9af8-e385a0d021be","type":"quote","properties":{"title":[["Zookeeper，Eureka，Consul比较。ap，cp都一样吗"]]},"created_time":1712457903468,"last_edited_time":1712458320637,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"cd0231c4-719c-4d6e-bf67-f16a6b670555":{"value":{"id":"cd0231c4-719c-4d6e-bf67-f16a6b670555","type":"text","properties":{"title":[["Zookeeper，Eureka，和 Consul 都是服务发现和注册中心的解决方案。但是他们在设计理念、功能特性、数据一致性等方面有所不同。"]]},"created_time":1712457894019,"last_edited_time":1712457894024,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"9997f489-a924-44f7-b989-d31f7addf6df":{"value":{"id":"9997f489-a924-44f7-b989-d31f7addf6df","type":"numbered_list","properties":{"title":[["Zookeeper："]]},"content":["719e7f25-1ec9-4f81-bfba-6bd7a99f4e84","a8eea927-cc41-4247-8f14-b80c0411c0a0"],"created_time":1712457894020,"last_edited_time":1712457894024,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"719e7f25-1ec9-4f81-bfba-6bd7a99f4e84":{"value":{"id":"719e7f25-1ec9-4f81-bfba-6bd7a99f4e84","type":"bulleted_list","properties":{"title":[["Zookeeper 是 Apache 的一个子项目，它是一个分布式的，开放源码的分布式应用程序协调服务，是 Google的 Chubby 的开源实现。它主要用来解决分布式应用中的一致性问题，可以提供基于类似于文件系统的目录节点树方式的数据存储。"]]},"created_time":1712457894020,"last_edited_time":1712457894024,"parent_id":"9997f489-a924-44f7-b989-d31f7addf6df","parent_table":"block","alive":true}},"a8eea927-cc41-4247-8f14-b80c0411c0a0":{"value":{"id":"a8eea927-cc41-4247-8f14-b80c0411c0a0","type":"bulleted_list","properties":{"title":[["Zookeeper 是 CP 的系统，在 CAP 定理中，Zookeeper 更加偏向于保证数据的一致性和分区容错性，可能牺牲一定的可用性。"]]},"created_time":1712457894020,"last_edited_time":1712457894024,"parent_id":"9997f489-a924-44f7-b989-d31f7addf6df","parent_table":"block","alive":true}},"409d1819-249e-4544-b27a-b4f4ed746f39":{"value":{"id":"409d1819-249e-4544-b27a-b4f4ed746f39","type":"numbered_list","properties":{"title":[["Eureka："]]},"content":["8b3dd25e-4bb5-4871-b6fd-fa2766eda8ee","ff5da217-fca3-479d-90fb-95c0cba06817"],"created_time":1712457894020,"last_edited_time":1712457894024,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"8b3dd25e-4bb5-4871-b6fd-fa2766eda8ee":{"value":{"id":"8b3dd25e-4bb5-4871-b6fd-fa2766eda8ee","type":"bulleted_list","properties":{"title":[["Eureka 是 Netflix 开源的服务发现框架，主要用在云计算中，用以解决微服务架构中的服务发现问题。它的客户端同时也是服务端，这种设计哲学就是服务治理的核心所在。"]]},"created_time":1712457894020,"last_edited_time":1712457894024,"parent_id":"409d1819-249e-4544-b27a-b4f4ed746f39","parent_table":"block","alive":true}},"ff5da217-fca3-479d-90fb-95c0cba06817":{"value":{"id":"ff5da217-fca3-479d-90fb-95c0cba06817","type":"bulleted_list","properties":{"title":[["Eureka 是 AP 的系统，在 CAP 定理中，Eureka 更加偏向于保证可用性，即使在网络分区的情况下，Eureka 也不会拒绝服务注册与发现，可能会牺牲一定的数据一致性。"]]},"created_time":1712457894020,"last_edited_time":1712457894024,"parent_id":"409d1819-249e-4544-b27a-b4f4ed746f39","parent_table":"block","alive":true}},"2d0d08ce-bd8f-4f68-aa1b-bf61ea043b97":{"value":{"id":"2d0d08ce-bd8f-4f68-aa1b-bf61ea043b97","type":"numbered_list","properties":{"title":[["Consul："]]},"content":["8fd16bd2-0ae9-40e0-a9e0-6885b5aab220","99d66e47-cc04-477c-be01-24ada693e580"],"created_time":1712457894021,"last_edited_time":1712457894024,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"8fd16bd2-0ae9-40e0-a9e0-6885b5aab220":{"value":{"id":"8fd16bd2-0ae9-40e0-a9e0-6885b5aab220","type":"bulleted_list","properties":{"title":[["Consul 是 HashiCorp 公司推出的开源工具，提供服务发现和配置。Consul 是分布式的，高可用的，具有数据中心感知能力的服务发现和配置系统。Consul 更像是综合了 Zookeeper 和 Eureka 的功能特性，既可以作为服务发现注册中心，又提供了健康检查的功能。"]]},"created_time":1712457894020,"last_edited_time":1712457894024,"parent_id":"2d0d08ce-bd8f-4f68-aa1b-bf61ea043b97","parent_table":"block","alive":true}},"99d66e47-cc04-477c-be01-24ada693e580":{"value":{"id":"99d66e47-cc04-477c-be01-24ada693e580","type":"bulleted_list","properties":{"title":[["Consul 是 CP 的系统，在 CAP 定理中，Consul 更加偏向于保证数据一致性和分区容错性，但是在极端情况下，可能会牺牲一定的可用性。"]]},"created_time":1712457894021,"last_edited_time":1712457894024,"parent_id":"2d0d08ce-bd8f-4f68-aa1b-bf61ea043b97","parent_table":"block","alive":true}},"c80c5bd0-86b6-4bb5-a798-673aa4c939af":{"value":{"id":"c80c5bd0-86b6-4bb5-a798-673aa4c939af","type":"text","properties":{"title":[["总的来说，Zookeeper，Eureka，和 Consul 在 AP（Availability，Partition tolerance）和 AC（Atomicity，Consistency）的取舍上是有差异的。在 CAP 理论中，一个分布式系统无法同时满足一致性，可用性和分区容错性，只能满足其中的两项。"],["Zookeeper 和 Consul 更偏重于一致性，而 Eureka 则更偏重于可用性",[["b"]]],["。"]]},"created_time":1712457894021,"last_edited_time":1712457920009,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"4ce569b2-d8c1-4cdc-959a-0680a67994c0":{"value":{"id":"4ce569b2-d8c1-4cdc-959a-0680a67994c0","type":"divider","format":{"copied_from_pointer":{"id":"7db794ad-1695-41d1-9c4e-4f37b0f4f04e","table":"block","spaceId":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"}},"created_time":1712458543644,"last_edited_time":1712458543646,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true,"copied_from":"7db794ad-1695-41d1-9c4e-4f37b0f4f04e"}},"84a376d9-f5e0-492f-8754-845f99b03dcf":{"value":{"id":"84a376d9-f5e0-492f-8754-845f99b03dcf","type":"text","created_time":1712458215139,"last_edited_time":1712458215139,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"707824a3-8aa4-41c6-bd49-9022d6d5d778":{"value":{"id":"707824a3-8aa4-41c6-bd49-9022d6d5d778","type":"quote","properties":{"title":[["为什么Zookeeper 和 Consul 更偏重于一致性，而 Eureka 则更偏重于可用性。把底层实现细节给我说下，用java代码"]]},"created_time":1712458218188,"last_edited_time":1712458318876,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"4d90b249-0bb4-4096-bfa2-6507b9c8a31e":{"value":{"id":"4d90b249-0bb4-4096-bfa2-6507b9c8a31e","type":"text","properties":{"title":[["在 CAP 理论中，一致性 (Consistency)、可用性 (Availability) 和分区容错性 (Partition tolerance) 是无法同时满足的。这表示在面临网络分区 (Partition) 的情况下，我们需要在一致性和可用性之间做出选择。在这种情况下，ZooKeeper 和 Consul 选择了一致性，而 Eureka 则选择了可用性。"]]},"created_time":1712458228145,"last_edited_time":1712458228156,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"064c5e1c-dffe-45f4-9117-e43e50c909bd":{"value":{"id":"064c5e1c-dffe-45f4-9117-e43e50c909bd","type":"numbered_list","properties":{"title":[["ZooKeeper 和 Consul:"]]},"content":["3b90cc74-4e31-4172-bc12-7732acffdeea","c8a17da9-2e6d-4ed6-ac58-ba1883d85379"],"created_time":1712458228146,"last_edited_time":1712458228156,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"3b90cc74-4e31-4172-bc12-7732acffdeea":{"value":{"id":"3b90cc74-4e31-4172-bc12-7732acffdeea","type":"text","properties":{"title":[["ZooKeeper 和 Consul 使用了 Raft 或 Paxos 等"],["强一致性算法",[["b"]]],["来保证在分布式环境中数据的一致性。在这些算法中，大部分的操作都需要经过多数节点的确认，才能够被视为成功。例如，在一个五个节点的集群中，任何操作都需要至少三个节点确认。这确保了即使在网络分区的情况下，只要大多数的节点能够正常通信，系统就能够继续提供一致性的服务。"]]},"created_time":1712458228146,"last_edited_time":1712458249705,"parent_id":"064c5e1c-dffe-45f4-9117-e43e50c909bd","parent_table":"block","alive":true}},"c8a17da9-2e6d-4ed6-ac58-ba1883d85379":{"value":{"id":"c8a17da9-2e6d-4ed6-ac58-ba1883d85379","type":"text","properties":{"title":[["这种做法的代价就是可用性。如果因为网络分区或者其他原因，导致无法获得大多数节点的确认，那么操作就会被阻塞，系统无法对外提供服务。"]]},"created_time":1712458228146,"last_edited_time":1712458228156,"parent_id":"064c5e1c-dffe-45f4-9117-e43e50c909bd","parent_table":"block","alive":true}},"138fbb54-b075-4d0d-9441-ab4d4e21ffef":{"value":{"id":"138fbb54-b075-4d0d-9441-ab4d4e21ffef","type":"numbered_list","properties":{"title":[["Eureka:"]]},"content":["56e1f8ff-f90a-4cb4-b121-829393e07caa","beaa214b-e578-488b-b1e6-1c46ec692d56"],"created_time":1712458228146,"last_edited_time":1712458228156,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"56e1f8ff-f90a-4cb4-b121-829393e07caa":{"value":{"id":"56e1f8ff-f90a-4cb4-b121-829393e07caa","type":"text","properties":{"title":[["Eureka 选择了另外一种方式，即在网络分区的情况下，优先保证可用性。Eureka 的服务注册中心对于客户端注册的信息并不会立即同步到其他节点，而是通过定期的方式进行同步。这种方式在网络分区的情况下，每个节点都可以独立的对外提供服务，从而保证了高可用。"]]},"created_time":1712458228146,"last_edited_time":1712458228156,"parent_id":"138fbb54-b075-4d0d-9441-ab4d4e21ffef","parent_table":"block","alive":true}},"beaa214b-e578-488b-b1e6-1c46ec692d56":{"value":{"id":"beaa214b-e578-488b-b1e6-1c46ec692d56","type":"text","properties":{"title":[["但是，这种做法的代价就是一致性。在网络分区的情况下，各个节点之间的数据可能会出现不一致的情况。"]]},"created_time":1712458228146,"last_edited_time":1712458228156,"parent_id":"138fbb54-b075-4d0d-9441-ab4d4e21ffef","parent_table":"block","alive":true}},"aa23ef44-e8a0-47e2-a58a-c1297176bb95":{"value":{"id":"aa23ef44-e8a0-47e2-a58a-c1297176bb95","type":"text","properties":{"title":[["下面是一段简单的 Java 代码，用于说明 ZooKeeper 和 Consul 的一致性操作："]]},"created_time":1712458228146,"last_edited_time":1712458228156,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"80191352-3b19-4027-8053-320d264d6cfe":{"value":{"id":"80191352-3b19-4027-8053-320d264d6cfe","type":"code","properties":{"title":[["public void createNode(String path, byte[] data) throws Exception {\n    zookeeper.create(path, data, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n}\n\npublic void setData(String path, byte[] data) throws Exception {\n    zookeeper.setData(path, data, -1);\n}\n\npublic byte[] getData(String path) throws Exception {\n    return zookeeper.getData(path, false, null);\n}\n"]],"language":[["Java"]]},"format":{"code_wrap":true},"created_time":1712458228150,"last_edited_time":1712458228156,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"8fb1ac88-e13a-45a7-9557-a8580e890c4c":{"value":{"id":"8fb1ac88-e13a-45a7-9557-a8580e890c4c","type":"text","properties":{"title":[["在这段代码中，"],["create",[["c"]]],[", "],["setData",[["c"]]],[" 和 "],["getData",[["c"]]],[" 操作都需要在多数节点上达成一致，才能被视为成功。"]]},"created_time":1712458228150,"last_edited_time":1712458228156,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"0edfbae9-636a-418a-b4a9-dcb6bd255746":{"value":{"id":"0edfbae9-636a-418a-b4a9-dcb6bd255746","type":"text","properties":{"title":[["而 Eureka 的可用性操作可以用以下的 Java 代码表示："]]},"created_time":1712458228150,"last_edited_time":1712458228156,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"499b2350-1b74-4204-a652-abef0cbf1c83":{"value":{"id":"499b2350-1b74-4204-a652-abef0cbf1c83","type":"code","properties":{"title":[["public void registerInstance(String appName, InstanceInfo instanceInfo) throws EurekaException {\n    eurekaClient.registerInstance(appName, instanceInfo);\n}\n\npublic InstanceInfo getInstance(String appName, String id) throws EurekaException {\n    return eurekaClient.getInstance(appName, id);\n}\n"]],"language":[["Java"]]},"format":{"code_wrap":true},"created_time":1712458228150,"last_edited_time":1712458228156,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"08b67ec1-f6dc-4d27-8179-01e34cb2ee4d":{"value":{"id":"08b67ec1-f6dc-4d27-8179-01e34cb2ee4d","type":"text","properties":{"title":[["在这段代码中，"],["registerInstance",[["c"]]],[" 和 "],["getInstance",[["c"]]],[" 操作都不需要在多数节点上达成一致，因此能够在网络分区的情况下继续提供服务。"]]},"created_time":1712458228150,"last_edited_time":1712458228156,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"26f43f56-988b-4c11-8b83-55f7a0683c25":{"value":{"id":"26f43f56-988b-4c11-8b83-55f7a0683c25","type":"divider","format":{"copied_from_pointer":{"id":"7db794ad-1695-41d1-9c4e-4f37b0f4f04e","table":"block","spaceId":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"}},"created_time":1712458548831,"last_edited_time":1712458548832,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true,"copied_from":"7db794ad-1695-41d1-9c4e-4f37b0f4f04e"}},"15d43009-caa0-4edd-83d0-6832b7d97cc8":{"value":{"id":"15d43009-caa0-4edd-83d0-6832b7d97cc8","type":"text","created_time":1712458470388,"last_edited_time":1712458470388,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"989f2dd1-4c6c-4f1e-8d91-12258b3310aa":{"value":{"id":"989f2dd1-4c6c-4f1e-8d91-12258b3310aa","type":"quote","properties":{"title":[["dubbo适合大型的、统一的系统中使用，比如一个大型的电商系统。就是出于CAP理论的考察对吗"]]},"created_time":1712458472251,"last_edited_time":1712458473185,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"ce1cbe34-1f44-4ecb-95a0-f6a0a31b76a8":{"value":{"id":"ce1cbe34-1f44-4ecb-95a0-f6a0a31b76a8","type":"text","properties":{"title":[["Dubbo 是一款高性能的 Java RPC 框架，其主要设计目标是用于构建高性能和可扩展性强的服务端同步调用或异步调用。"]]},"created_time":1712458477355,"last_edited_time":1712458477359,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"4924ea3c-f339-4a7c-9173-2eb7c6c3a7bc":{"value":{"id":"4924ea3c-f339-4a7c-9173-2eb7c6c3a7bc","type":"text","properties":{"title":[["Dubbo 在选择 CAP 理论的时候，更倾向于选择 CP（一致性和分区容错性），优先保证数据的一致性以及系统的分区容错性。"]]},"created_time":1712458477356,"last_edited_time":1712458477359,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"5de62780-8f62-4de9-b165-d1ab2e0ee600":{"value":{"id":"5de62780-8f62-4de9-b165-d1ab2e0ee600","type":"text","properties":{"title":[["在大型的、统一的系统中，确保数据的一致性显得尤为重要，因为数据的不一致性可能会导致一些严重的问题，如订单数据不一致、库存数据不一致等。此外，大型的系统往往需要处理大量的请求，系统的可扩展性和性能也是非常重要的，而 Dubbo 的设计正好可以满足这些需求。"]]},"created_time":1712458477356,"last_edited_time":1712458477359,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"48a626ec-52c4-4994-accb-4feab9ce24ad":{"value":{"id":"48a626ec-52c4-4994-accb-4feab9ce24ad","type":"text","properties":{"title":[["但是，是否选择 Dubbo 并不能仅仅从 CAP 理论来考虑，还需要结合具体的业务需求和系统特性。例如，如果你的系统是一个服务间互相独立，对数据一致性要求不高的系统，使用基于 HTTP 的 RESTful API 可能会是一个更好的选择。因为 HTTP 协议简单、成熟，而且可以直接与现代的 Web 技术栈集成。"]]},"created_time":1712458477356,"last_edited_time":1712458477359,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"40ae3b73-8135-4715-85be-efc9ec2ad883":{"value":{"id":"40ae3b73-8135-4715-85be-efc9ec2ad883","type":"divider","format":{"copied_from_pointer":{"id":"7db794ad-1695-41d1-9c4e-4f37b0f4f04e","table":"block","spaceId":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"}},"created_time":1712458550826,"last_edited_time":1712458550827,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true,"copied_from":"7db794ad-1695-41d1-9c4e-4f37b0f4f04e"}},"1ac8dbc8-7cbd-4519-8ad3-9c1557e960f5":{"value":{"id":"1ac8dbc8-7cbd-4519-8ad3-9c1557e960f5","type":"sub_sub_header","properties":{"title":[["总结"]]},"created_time":1712458486408,"last_edited_time":1712472321230,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"e19cd5bc-571f-49ab-8fbc-fc08629f8cd5":{"value":{"id":"e19cd5bc-571f-49ab-8fbc-fc08629f8cd5","type":"bulleted_list","properties":{"title":[["dubbo的传输协议和序列化协议就对RPC方式更快。"]]},"created_time":1712458686453,"last_edited_time":1712458963175,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"1d79ce45-1106-4ab6-b13f-642ba2b2c52a":{"value":{"id":"1d79ce45-1106-4ab6-b13f-642ba2b2c52a","type":"bulleted_list","properties":{"title":[["http和https的协议可以完美的调用已有的服务，比如python服务，只要你有web端点我就可以调用。"]]},"created_time":1712458848734,"last_edited_time":1712458961865,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"9d88c19c-3906-4462-8d0f-4f91525c6fde":{"value":{"id":"9d88c19c-3906-4462-8d0f-4f91525c6fde","type":"bulleted_list","properties":{"title":[["zookeeper是CP的，以为着适合一致性要求更高的服务。"]]},"created_time":1712458905860,"last_edited_time":1712458958023,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"d598224d-949c-4e30-bf97-c68dd43ff061":{"value":{"id":"d598224d-949c-4e30-bf97-c68dd43ff061","type":"bulleted_list","properties":{"title":[["cloud可供选择嘛，AP和CP都有。"]]},"created_time":1712458958181,"last_edited_time":1712458989006,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"29b7c7ec-281f-4894-8449-70b098c4d366":{"value":{"id":"29b7c7ec-281f-4894-8449-70b098c4d366","type":"bulleted_list","properties":{"title":[["刚开的项目架构合理，需要一致性强那么就用dubbo。老项目改造用springCloud没有那么麻烦"]]},"created_time":1712458994628,"last_edited_time":1712459038073,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"70634efc-b1df-4cff-ae45-4569354ae08d":{"value":{"id":"70634efc-b1df-4cff-ae45-4569354ae08d","type":"text","created_time":1712458670794,"last_edited_time":1712458670794,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"65662554-832e-4ed9-b000-f8018d2a93bf":{"value":{"id":"65662554-832e-4ed9-b000-f8018d2a93bf","type":"sub_header","properties":{"title":[["3.限流算法中的令牌跟漏斗区别"]]},"created_time":1712334358600,"last_edited_time":1712457951261,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"2f3d7cc0-f08d-4bb0-b512-d95e7138a7a4":{"value":{"id":"2f3d7cc0-f08d-4bb0-b512-d95e7138a7a4","type":"sub_sub_header","properties":{"title":[["GPT问答"]]},"created_time":1712460765652,"last_edited_time":1712472323916,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"bf757fa2-6437-4d95-a797-63b2c01d5e12":{"value":{"id":"bf757fa2-6437-4d95-a797-63b2c01d5e12","type":"quote","properties":{"title":[["限流算法中的令牌跟漏斗区别"]]},"created_time":1712460781180,"last_edited_time":1712460783743,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"a59676c7-c9ac-4ac6-b816-dfd7191aaeae":{"value":{"id":"a59676c7-c9ac-4ac6-b816-dfd7191aaeae","type":"text","properties":{"title":[["令牌桶算法（Token Bucket）和漏桶算法（Leaky Bucket）都是网络流量整形（Traffic Shaping）和速率限制（Rate Limiting）中常用的算法。它们的主要目的是控制数据传输的速率，以防止网络拥塞。"]]},"created_time":1712459254009,"last_edited_time":1712459254014,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"dcda87f4-bc3e-4b57-8bf6-04734ef2c649":{"value":{"id":"dcda87f4-bc3e-4b57-8bf6-04734ef2c649","type":"numbered_list","properties":{"title":[["令牌桶算法："]]},"content":["10057243-e7ea-41e2-964f-b4cc59202237","08b0803f-218e-4e0a-924f-f348f30daeb2"],"created_time":1712459254010,"last_edited_time":1712459254014,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"10057243-e7ea-41e2-964f-b4cc59202237":{"value":{"id":"10057243-e7ea-41e2-964f-b4cc59202237","type":"text","properties":{"title":[["令牌桶算法是一个存放固定容量令牌（token）的桶，按照固定速率往桶中添加令牌。令牌桶算法的关键是，桶中最多只能存放 b 个令牌，如果桶满了，新来的令牌会被丢弃；当一个"],[" n 字节的数据包到达时",[["b"]]],["，如果桶中有足够的令牌，则会消耗 n 个令牌，并且数据包会被发送到网络上；如果桶中的令牌不足，则数据包将被缓存或丢弃。"]]},"created_time":1712459254010,"last_edited_time":1712460128696,"parent_id":"dcda87f4-bc3e-4b57-8bf6-04734ef2c649","parent_table":"block","alive":true}},"08b0803f-218e-4e0a-924f-f348f30daeb2":{"value":{"id":"08b0803f-218e-4e0a-924f-f348f30daeb2","type":"text","properties":{"title":[["令牌桶算法能够在限制数据的平均传输速率的同时，还允许某种程度的突发数据传输。"]]},"created_time":1712459254010,"last_edited_time":1712459254014,"parent_id":"dcda87f4-bc3e-4b57-8bf6-04734ef2c649","parent_table":"block","alive":true}},"65b73029-ad7d-4163-a67c-7b57247731be":{"value":{"id":"65b73029-ad7d-4163-a67c-7b57247731be","type":"numbered_list","properties":{"title":[["漏桶算法："]]},"content":["ccd4f764-ebb5-4119-ab8c-5bcc622a4b13","98fc2489-3d16-4258-bcd2-fbae95e7eae4"],"created_time":1712459254010,"last_edited_time":1712459254014,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"ccd4f764-ebb5-4119-ab8c-5bcc622a4b13":{"value":{"id":"ccd4f764-ebb5-4119-ab8c-5bcc622a4b13","type":"text","properties":{"title":[["漏桶算法可以看作是一个漏洞大小固定的桶，流进桶里的水（代表网络流量）会以恒定的速率流出，漏水速率是固定的，即使瞬间大量水流入，流出速率也不会变大。如果桶中的水满了，多余的水会直接溢出。"]]},"created_time":1712459254010,"last_edited_time":1712459254014,"parent_id":"65b73029-ad7d-4163-a67c-7b57247731be","parent_table":"block","alive":true}},"98fc2489-3d16-4258-bcd2-fbae95e7eae4":{"value":{"id":"98fc2489-3d16-4258-bcd2-fbae95e7eae4","type":"text","properties":{"title":[["通过漏桶算法，可以平滑网络流量，限制数据流的突发性，但是它不能够应对突然的大流量。"]]},"created_time":1712459254010,"last_edited_time":1712459254014,"parent_id":"65b73029-ad7d-4163-a67c-7b57247731be","parent_table":"block","alive":true}},"50f34710-f078-4e6f-ae3d-5fbd0a817a91":{"value":{"id":"50f34710-f078-4e6f-ae3d-5fbd0a817a91","type":"text","properties":{"title":[["总的来说，令牌桶算法能够更好地处理突发流量，因为当突发流量来临时，只要桶中有足够的令牌，就可以直接发送数据，不会出现丢包的情况；而漏桶算法则更加强调流量的平滑性，它会严格控制数据的发送速度，不允许有突发流量的出现。"]]},"created_time":1712459254010,"last_edited_time":1712459254014,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"18c829b6-60a3-46b9-ad60-2e8c1e96a819":{"value":{"id":"18c829b6-60a3-46b9-ad60-2e8c1e96a819","type":"divider","created_time":1712460364279,"last_edited_time":1712460364281,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"0526de23-c671-4489-b1cb-268cbdc9e3bc":{"value":{"id":"0526de23-c671-4489-b1cb-268cbdc9e3bc","type":"text","created_time":1712460365347,"last_edited_time":1712460365347,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"b93a19d3-623f-4ea6-85c3-319c527eafea":{"value":{"id":"b93a19d3-623f-4ea6-85c3-319c527eafea","type":"quote","properties":{"title":[["令牌桶是根据字节数来限流的。如果t时有1000个令牌，A请求消耗800个token，B请求如果是199字节就会顺利通过，如果是201字节就会直接被丢弃是吧。令牌桶也可以设计成请求次数限流对吧"]]},"created_time":1712460368014,"last_edited_time":1712460374015,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"126cec14-65f5-440c-b9cc-6bf67871dae3":{"value":{"id":"126cec14-65f5-440c-b9cc-6bf67871dae3","type":"text","properties":{"title":[["是的，你的理解是正确的。"]]},"created_time":1712460383737,"last_edited_time":1712460383740,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"2b62d6b3-7b8b-4449-8d88-23d7a817b66d":{"value":{"id":"2b62d6b3-7b8b-4449-8d88-23d7a817b66d","type":"text","properties":{"title":[["令牌桶算法通常根据数据包的字节数来限流，每个数据包到达时，都会尝试从令牌桶中取出相应数量的令牌。如果桶中的令牌不足，数据包将被丢弃或缓冲。"]]},"created_time":1712460383737,"last_edited_time":1712460383740,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"be3a7323-5955-4d4b-95e0-c3f72bfb2b09":{"value":{"id":"be3a7323-5955-4d4b-95e0-c3f72bfb2b09","type":"text","properties":{"title":[["在你的例子中，如果在 t 时刻有 1000 个令牌，A 请求消耗了 800 个令牌，那么剩余的令牌数量为 200。如果此时 B 请求需要 199 个令牌，那么 B 请求可以顺利通过；如果 B 请求需要 201 个令牌，那么 B 请求就会被丢弃，因为此时令牌桶中的令牌不足。"]]},"created_time":1712460383737,"last_edited_time":1712460383740,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"8f0098c7-7d59-48e1-8413-8d94f0c59329":{"value":{"id":"8f0098c7-7d59-48e1-8413-8d94f0c59329","type":"text","properties":{"title":[["令牌桶算法也可以用于限制请求的次数。在这种情况下，每个请求消耗的令牌数量为固定的 1 个，而不是根据数据包的大小变化。这样，令牌桶中的令牌数量就代表了系统允许的最大请求次数。如果桶中的令牌不足，新来的请求将被丢弃或缓冲，从而实现了请求次数的限流。"]]},"created_time":1712460383737,"last_edited_time":1712460383740,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"b44e89e3-8079-41bb-8819-d64ecaa8b544":{"value":{"id":"b44e89e3-8079-41bb-8819-d64ecaa8b544","type":"divider","created_time":1712460518293,"last_edited_time":1712460518295,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"e6fde3ef-a4dc-495c-a344-1118e4532c98":{"value":{"id":"e6fde3ef-a4dc-495c-a344-1118e4532c98","type":"text","created_time":1712460518601,"last_edited_time":1712460518601,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"e255a822-2445-4e80-bb1b-d935dbe47845":{"value":{"id":"e255a822-2445-4e80-bb1b-d935dbe47845","type":"quote","properties":{"title":[["但是这样有点粗暴，通用解决方案应该是请求ip，请求终端唯一标识，用户访问token来限流是吧。给我写出Java语言的令牌桶算法和漏斗算法"]]},"created_time":1712460520374,"last_edited_time":1712460532181,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"65f440df-5d66-406c-b3a0-c96b81e33d36":{"value":{"id":"65f440df-5d66-406c-b3a0-c96b81e33d36","type":"text","properties":{"title":[["你的理解是正确的，实际应用中的限流策略通常会更加复杂，可能会根据 IP 地址、用户标识（如用户 ID、访问令牌等）或者请求的类型等信息进行限流。下面是使用 Java 语言实现的基于 Guava RateLimiter 的令牌桶限流算法示例："]]},"created_time":1712460537412,"last_edited_time":1712460537420,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"ab0f6036-0c9e-41eb-a2ec-812398a84be7":{"value":{"id":"ab0f6036-0c9e-41eb-a2ec-812398a84be7","type":"code","properties":{"title":[["import com.google.common.util.concurrent.RateLimiter;\n\npublic class RateLimiterDemo {\n  public static void main(String[] args) {\n    // 创建一个限流器，设置令牌生成速率为1个/秒\n    RateLimiter rateLimiter = RateLimiter.create(1.0);\n\n    for (int i = 1; i <= 10; i++) {\n      // 从令牌桶中获取令牌，如果没有足够的令牌则等待\n      double waitTime = rateLimiter.acquire();\n      System.out.println(\"获取令牌成功，消耗时间：\" + waitTime);\n    }\n  }\n}\n"]],"language":[["Java"]]},"format":{"code_wrap":true},"created_time":1712460537416,"last_edited_time":1712460537420,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"22927495-a3b1-4b11-bc6e-232a64df0c01":{"value":{"id":"22927495-a3b1-4b11-bc6e-232a64df0c01","type":"text","properties":{"title":[["对于漏桶算法，Java 中没有现成的实现，但是可以使用 Semaphore（信号量）类来模拟实现："]]},"created_time":1712460537416,"last_edited_time":1712460537420,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"33187b3c-2107-4353-b805-38485abae444":{"value":{"id":"33187b3c-2107-4353-b805-38485abae444","type":"code","properties":{"title":[["import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Semaphore;\nimport java.util.concurrent.TimeUnit;\n\npublic class LeakyBucketDemo {\n  public static void main(String[] args) {\n    // 创建一个线程池\n    ExecutorService executor = Executors.newScheduledThreadPool(5);\n    // 创建一个信号量，模拟漏桶大小\n    Semaphore semaphore = new Semaphore(5);\n\n    for (int i = 1; i <= 10; i++) {\n      // 提交一个任务\n      executor.submit(() -> {\n        try {\n          // 尝试获取一个许可，如果漏桶已满则等待\n          semaphore.acquire();\n          try {\n            // 模拟处理任务\n            System.out.println(\"处理任务开始\");\n            TimeUnit.SECONDS.sleep(1);\n            System.out.println(\"处理任务结束\");\n          } finally {\n            // 释放一个许可，模拟一个任务完成并离开漏桶\n            semaphore.release();\n          }\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      });\n    }\n\n    // 关闭线程池\n    executor.shutdown();\n  }\n}\n"]],"language":[["Java"]]},"format":{"code_wrap":true},"created_time":1712460537416,"last_edited_time":1712460537420,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"d2264bd9-bbb6-4a93-b33b-22eaab7beba3":{"value":{"id":"d2264bd9-bbb6-4a93-b33b-22eaab7beba3","type":"text","properties":{"title":[["以上代码只是简单的示例，实际应用中的限流策略可能会更加复杂，并且需要考虑到更多的因素，如并发控制、服务降级、熔断等。"]]},"created_time":1712460537416,"last_edited_time":1712460537420,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"83ca355d-21d6-438f-9566-970bcb6c1ae7":{"value":{"id":"83ca355d-21d6-438f-9566-970bcb6c1ae7","type":"divider","created_time":1712472121484,"last_edited_time":1712472121485,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"92bc8af6-9bb6-4ac6-923f-260f36061597":{"value":{"id":"92bc8af6-9bb6-4ac6-923f-260f36061597","type":"text","created_time":1712472121501,"last_edited_time":1712472121501,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"385c3bdc-ea5e-4c02-bdbf-cf16e776d52c":{"value":{"id":"385c3bdc-ea5e-4c02-bdbf-cf16e776d52c","type":"quote","properties":{"title":[["zuul这个框架也可以配置这两个算法，给我写出代码"]]},"created_time":1712460667243,"last_edited_time":1712472131754,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"053d1f64-ddf6-4c15-9bb9-3ee07c91ac49":{"value":{"id":"053d1f64-ddf6-4c15-9bb9-3ee07c91ac49","type":"text","properties":{"title":[["在 Spring Cloud Zuul 中，我们可以使用 Spring Cloud Netflix 的 RateLimiter 实现基于令牌桶的限流。下面是一种可能的实现方式："]]},"created_time":1712460683515,"last_edited_time":1712460683523,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"6f08c7ba-0b0f-4d25-9216-9c43a7f77bcc":{"value":{"id":"6f08c7ba-0b0f-4d25-9216-9c43a7f77bcc","type":"text","properties":{"title":[["首先，你需要在你的 zuul 网关服务中添加 spring-cloud-starter-netflix-zuul 依赖。然后你可以为你的 Zuul 服务添加一个过滤器来实现限流。"]]},"created_time":1712460683515,"last_edited_time":1712460683523,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"c630da5b-d0c9-4c73-ac22-3df2f41034aa":{"value":{"id":"c630da5b-d0c9-4c73-ac22-3df2f41034aa","type":"code","properties":{"title":[["import com.google.common.util.concurrent.RateLimiter;\nimport com.netflix.zuul.ZuulFilter;\nimport com.netflix.zuul.context.RequestContext;\nimport com.netflix.zuul.exception.ZuulException;\nimport org.springframework.stereotype.Component;\n\nimport javax.servlet.http.HttpServletResponse;\n\n@Component\npublic class RateLimitZuulFilter extends ZuulFilter {\n\n    // 每秒产生2个令牌\n    private static final RateLimiter RATE_LIMITER = RateLimiter.create(2);\n\n    @Override\n    public String filterType() {\n        return \"pre\"; // 前置过滤器\n    }\n\n    @Override\n    public int filterOrder() {\n        return -5; // 优先级，数字越小优先级越高\n    }\n\n    @Override\n    public boolean shouldFilter() {\n        return true; // 所有请求都过滤\n    }\n\n    @Override\n    public Object run() throws ZuulException {\n        RequestContext requestContext = RequestContext.getCurrentContext();\n\n        if (!RATE_LIMITER.tryAcquire()) { // 尝试获取令牌\n            requestContext.setSendZuulResponse(false); // 不对其进行路由\n            requestContext.setResponseStatusCode(HttpServletResponse.SC_TOO_MANY_REQUESTS); // 返回错误码\n        }\n\n        return null;\n    }\n}\n"]],"language":[["Java"]]},"format":{"code_wrap":true},"created_time":1712460683518,"last_edited_time":1712460683523,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"5d426dfa-6367-47dd-8aa0-c9dbdffe8c6e":{"value":{"id":"5d426dfa-6367-47dd-8aa0-c9dbdffe8c6e","type":"text","properties":{"title":[["需要注意的是，以上代码中的 RateLimiter.create(2) 创建了一个每秒产生 2 个令牌的 RateLimiter。"]]},"created_time":1712460683518,"last_edited_time":1712460683523,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"bf63f719-0033-487f-bebe-aaaddca1ed7c":{"value":{"id":"bf63f719-0033-487f-bebe-aaaddca1ed7c","type":"text","properties":{"title":[["然而，Zuul 没有内置的漏桶算法实现，你需要自己实现漏桶算法或者使用第三方库。上述的令牌桶实现也是一个非常简单的实现，实际使用中你可能需要根据 IP 地址、用户标识等信息来创建并管理多个 RateLimiter 实例。"]]},"created_time":1712460683518,"last_edited_time":1712460683523,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"3a647354-19d2-4732-a497-4e387262d947":{"value":{"id":"3a647354-19d2-4732-a497-4e387262d947","type":"divider","created_time":1712472136670,"last_edited_time":1712472136671,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"6f316220-c056-4271-9b4e-3106f7d4e88f":{"value":{"id":"6f316220-c056-4271-9b4e-3106f7d4e88f","type":"text","created_time":1712460678984,"last_edited_time":1712460678984,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"44ff0f50-5ad4-4bca-907d-2fefcb0e86aa":{"value":{"id":"44ff0f50-5ad4-4bca-907d-2fefcb0e86aa","type":"quote","properties":{"title":[["gateway这个框架也可以配置这两个算法，给我写出代码"]]},"created_time":1712460715633,"last_edited_time":1712472144093,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"9dff64c2-3741-4851-814d-d1c1519fefda":{"value":{"id":"9dff64c2-3741-4851-814d-d1c1519fefda","type":"text","properties":{"title":[["Spring Cloud Gateway 提供了更加强大和灵活的限流功能，可以基于任何可从 exchange 对象中获取的信息进行限流，包括请求路径、来源 IP、用户 ID 等。以下是一个基于请求路径和每秒请求数量的简单限流规则配置示例："]]},"created_time":1712460723566,"last_edited_time":1712460723570,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"62e2075c-ab42-41bb-99db-9bfc08161e48":{"value":{"id":"62e2075c-ab42-41bb-99db-9bfc08161e48","type":"text","properties":{"title":[["首先，添加 Spring Cloud Gateway 的依赖："]]},"created_time":1712460723566,"last_edited_time":1712460723570,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"42ee6ca8-71aa-461c-b80f-3da8c27b4436":{"value":{"id":"42ee6ca8-71aa-461c-b80f-3da8c27b4436","type":"code","properties":{"title":[["<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-gateway</artifactId>\n</dependency>\n"]],"language":[["XML"]]},"format":{"code_wrap":true},"created_time":1712460723566,"last_edited_time":1712460723570,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"f057295a-e996-4759-8408-9a72d156a9c7":{"value":{"id":"f057295a-e996-4759-8408-9a72d156a9c7","type":"text","properties":{"title":[["然后，在你的 Spring Cloud Gateway 服务中配置限流规则："]]},"created_time":1712460723566,"last_edited_time":1712460723570,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"6fb47951-6a64-4574-bb08-eaf19931a643":{"value":{"id":"6fb47951-6a64-4574-bb08-eaf19931a643","type":"code","properties":{"title":[["import org.springframework.cloud.gateway.filter.ratelimit.KeyResolver;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.server.reactive.ServerHttpRequest;\nimport reactor.core.publisher.Mono;\n\n@Configuration\npublic class RateLimiterConfig {\n\n    @Bean\n    public KeyResolver pathKeyResolver() {\n        return exchange -> {\n            ServerHttpRequest request = exchange.getRequest();\n            // 使用请求路径作为限流 Key\n            return Mono.just(request.getPath().toString());\n        };\n    }\n\n}"]],"language":[["Java"]]},"format":{"code_wrap":true},"created_time":1712460723566,"last_edited_time":1712472147658,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"4f64b71e-c4c4-4e99-85fb-154ff17419af":{"value":{"id":"4f64b71e-c4c4-4e99-85fb-154ff17419af","type":"text","properties":{"title":[["然后在你的 application.yml 中配置具体的限流规则："]]},"created_time":1712460723566,"last_edited_time":1712460723570,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"fb44022a-b688-4772-bf81-ecae9ad72119":{"value":{"id":"fb44022a-b688-4772-bf81-ecae9ad72119","type":"code","properties":{"title":[["spring:\n  cloud:\n    gateway:\n      routes:\n      - id: rate_limit_route\n        uri: <http://example.com>\n        predicates:\n        - Path=/api/**\n        filters:\n        - name: RequestRateLimiter\n          args:\n            key-resolver: \"#{@pathKeyResolver}\"\n            redis-rate-limiter.replenishRate: 10\n            redis-rate-limiter.burstCapacity: 20\n"]],"language":[["YAML"]]},"format":{"code_wrap":true},"created_time":1712460723566,"last_edited_time":1712460723570,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"1b8d93b5-76b0-4596-b827-c42b6445cc89":{"value":{"id":"1b8d93b5-76b0-4596-b827-c42b6445cc89","type":"text","properties":{"title":[["以上配置代表每秒最多处理 10 个请求，令牌桶的容量为 20 个令牌。"]]},"created_time":1712460723566,"last_edited_time":1712460723570,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"6f8825de-b0d2-43f4-b1f6-b588dae2358a":{"value":{"id":"6f8825de-b0d2-43f4-b1f6-b588dae2358a","type":"text","properties":{"title":[["对于漏桶算法，Spring Cloud Gateway 同样没有内置的实现，你需要自己实现漏桶算法或者使用第三方库。"]]},"created_time":1712460723566,"last_edited_time":1712460723570,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"43cf970f-42f2-4ac3-96fe-ce1472582942":{"value":{"id":"43cf970f-42f2-4ac3-96fe-ce1472582942","type":"divider","created_time":1712472156807,"last_edited_time":1712472156808,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"2dd009f7-5f2b-4d20-9c1d-a14b63d2f763":{"value":{"id":"2dd009f7-5f2b-4d20-9c1d-a14b63d2f763","type":"text","created_time":1712472156828,"last_edited_time":1712472156828,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"d224bd21-57b0-45c8-bb92-54065bec0d4e":{"value":{"id":"d224bd21-57b0-45c8-bb92-54065bec0d4e","type":"sub_sub_header","properties":{"title":[["总结"]]},"created_time":1712460750599,"last_edited_time":1712472330954,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"e325ba2b-10c4-4412-a6fc-6b4de66aa75e":{"value":{"id":"e325ba2b-10c4-4412-a6fc-6b4de66aa75e","type":"bulleted_list","properties":{"title":[["令牌桶算法能够更好地处理突发流量，因为当突发流量来临时，只要桶中有足够的令牌，就可以直接发送数据，不会出现丢包的情况；而漏桶算法则更加强调流量的平滑性，它会严格控制数据的发送速度，不允许有突发流量的出现。"]]},"created_time":1712460793972,"last_edited_time":1712460811437,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"2cd41ff5-a204-4f57-a87a-456eaa361660":{"value":{"id":"2cd41ff5-a204-4f57-a87a-456eaa361660","type":"bulleted_list","properties":{"title":[["都是限流，只不过令牌桶可以面对突发流量，所以令牌桶的取值应该是压测后的接近最大值"]]},"created_time":1712460823780,"last_edited_time":1712461021300,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"809a6e51-51a5-449e-a534-e5862ff13cc1":{"value":{"id":"809a6e51-51a5-449e-a534-e5862ff13cc1","type":"bulleted_list","properties":{"title":[["漏斗放过来的流量不应该设置为最大值"]]},"created_time":1712461007941,"last_edited_time":1712461050064,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"8f7194ee-649d-4707-8447-5ac027e4baf8":{"value":{"id":"8f7194ee-649d-4707-8447-5ac027e4baf8","type":"bulleted_list","properties":{"title":[["学到一个新概念：根据字节限流"]]},"created_time":1712461077175,"last_edited_time":1712461101452,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"874019b4-1345-4120-93de-425275ddd16d":{"value":{"id":"874019b4-1345-4120-93de-425275ddd16d","type":"sub_header","properties":{"title":[["4.死循环上线后排查"]]},"format":{"copied_from_pointer":{"id":"5fa04443-840e-41c3-86b1-afb81fb387bf","table":"block","spaceId":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"}},"created_time":1712330131919,"last_edited_time":1712457956172,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true,"copied_from":"5fa04443-840e-41c3-86b1-afb81fb387bf"}},"a1fc850e-4ab3-4d59-bf00-e2e0b13bcd18":{"value":{"id":"a1fc850e-4ab3-4d59-bf00-e2e0b13bcd18","type":"sub_sub_header","properties":{"title":[["GPT问答"]]},"created_time":1712472161643,"last_edited_time":1712472333891,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"25b324d4-6f5a-4d91-acae-94bc933a62ae":{"value":{"id":"25b324d4-6f5a-4d91-acae-94bc933a62ae","type":"quote","properties":{"title":[["java程序上线后怎么排查死循环"]]},"created_time":1712461155322,"last_edited_time":1712461159765,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"7051ebe5-d874-4c7f-8e25-8784bb685110":{"value":{"id":"7051ebe5-d874-4c7f-8e25-8784bb685110","type":"text","properties":{"title":[["在Java中，如果你的程序陷入了死循环，那么你将需要进行调试来找出问题的原因。以下是一些用于识别和解决死循环问题的常见方法："]]},"created_time":1712461166074,"last_edited_time":1712461166077,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"8c7c2d9a-33d9-47f5-9ae1-6d9faa7f19de":{"value":{"id":"8c7c2d9a-33d9-47f5-9ae1-6d9faa7f19de","type":"numbered_list","properties":{"title":[["使用JVisualVM或者JStack工具",[["b"]]],["：这些工具可以帮助你来查找程序中的线程，并可以看到线程的调用堆栈。这对于找出程序陷入死循环的位置很有帮助。JVisualVM是JDK自带的一个工具，它可以显示线程的CPU使用情况。如果有死循环，一般会有线程的CPU使用率很高。JStack是一个命令行工具，它可以打印出Java线程的堆栈跟踪。"]]},"created_time":1712461166074,"last_edited_time":1712461166077,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"87fcd96c-2934-4b99-abb8-c8c13df87891":{"value":{"id":"87fcd96c-2934-4b99-abb8-c8c13df87891","type":"numbered_list","properties":{"title":[["在IDE中使用调试器",[["b"]]],["：大多数现代IDE，如IntelliJ IDEA或Eclipse，都有强大的调试器。你可以设置断点，然后逐步执行程序，以查看哪个循环导致程序卡住。"]]},"created_time":1712461166074,"last_edited_time":1712461166077,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"ae3f1259-3d6b-4402-ac70-99b9b9e2064c":{"value":{"id":"ae3f1259-3d6b-4402-ac70-99b9b9e2064c","type":"numbered_list","properties":{"title":[["增加日志输出",[["b"]]],["：在你怀疑可能出现死循环的代码段中添加日志输出，这样可以帮助你理解代码的执行流程。如果你看到相同的日志条目被重复打印，那么这可能就是死循环所在的地方。"]]},"created_time":1712461166074,"last_edited_time":1712461166077,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"bd9c0378-a0d6-4b99-b749-94bb3b7be465":{"value":{"id":"bd9c0378-a0d6-4b99-b749-94bb3b7be465","type":"numbered_list","properties":{"title":[["使用性能剖析器（Profiler）",[["b"]]],["：性能剖析器可以帮助你识别程序中的瓶颈和性能问题，包括死循环。例如，你可以使用 Java 的 VisualVM 工具，它包含一个性能剖析器，可以帮助分析和诊断程序性能问题。"]]},"created_time":1712461166074,"last_edited_time":1712461166077,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"a489b769-3f06-4c63-8914-36558c6b3323":{"value":{"id":"a489b769-3f06-4c63-8914-36558c6b3323","type":"text","properties":{"title":[["以上方法需要结合具体情况进行使用，可能需要反复试验才能找到问题的根源。对于线上环境，由于不能直接修改代码，通常采用使用JVisualVM、JStack工具或者性能剖析器的方法来排查。"]]},"created_time":1712461166074,"last_edited_time":1712461166077,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"f5b9400e-67f1-4e59-988b-c68f527904a1":{"value":{"id":"f5b9400e-67f1-4e59-988b-c68f527904a1","type":"divider","created_time":1712472166342,"last_edited_time":1712472166343,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"2f1cb9fe-5975-4ca6-a49b-6ac3c690aee3":{"value":{"id":"2f1cb9fe-5975-4ca6-a49b-6ac3c690aee3","type":"text","created_time":1712472166364,"last_edited_time":1712472166364,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"994ca946-2457-49b1-a514-8163a4e98963":{"value":{"id":"994ca946-2457-49b1-a514-8163a4e98963","type":"quote","properties":{"title":[["arthas的thread和dashboard是不是可以更好的排查死循环，并且我还可以使用arthas提供的火焰图来分析哪些线程在占用CPU"]]},"created_time":1712461262144,"last_edited_time":1712461265599,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"e4c4e8b5-0832-4419-b56f-6a5d98dc4b92":{"value":{"id":"e4c4e8b5-0832-4419-b56f-6a5d98dc4b92","type":"text","properties":{"title":[["是的，你完全正确。Arthas 是阿里巴巴开源的一款 Java 诊断工具，提供了一些强大的命令来帮助开发者诊断线上的 Java 应用，包括线程分析(thread)、实时监控(dashboard)以及火焰图等。"]]},"created_time":1712461273216,"last_edited_time":1712461273221,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"34a54259-c912-4e8b-8ae5-38faca4ea68e":{"value":{"id":"34a54259-c912-4e8b-8ae5-38faca4ea68e","type":"numbered_list","properties":{"title":[["thread 命令",[["b"]]],["：thread 命令可以用来查看 Java 线程的详细信息，包括线程状态、堆栈信息等。这可以帮助你找出死循环的线程。"]]},"created_time":1712461273216,"last_edited_time":1712461273221,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"e56e6aa1-c6f2-4063-a4fe-f4ac502049bc":{"value":{"id":"e56e6aa1-c6f2-4063-a4fe-f4ac502049bc","type":"numbered_list","properties":{"title":[["dashboard 命令",[["b"]]],["：dashboard 命令可以实时查看 JVM 的运行状态，包括类加载信息、线程池信息、GC 信息等。在这里，你可以查看到 CPU 的使用情况，如果某个线程的 CPU 使用率异常的高，那么很可能就是发生了死循环。"]]},"created_time":1712461273217,"last_edited_time":1712461273221,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"6f3d4e9d-db7a-4106-8d59-959ca8afb6cc":{"value":{"id":"6f3d4e9d-db7a-4106-8d59-959ca8afb6cc","type":"numbered_list","properties":{"title":[["火焰图",[["b"]]],["：Arthas 还提供了生成火焰图的功能，火焰图可以直观地展示 CPU 使用情况，帮助你找出占用 CPU 过多的线程，从而定位到死循环的代码。"]]},"created_time":1712461273217,"last_edited_time":1712461273221,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"b89168de-d942-48bd-a8e0-9443c8083eb7":{"value":{"id":"b89168de-d942-48bd-a8e0-9443c8083eb7","type":"text","properties":{"title":[["使用 Arthas，你可以更方便地排查线上的 Java 应用问题，包括死循环问题。"]]},"created_time":1712461273217,"last_edited_time":1712461273221,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"c0283b95-d9ed-4afb-9d33-213a1ba8de7c":{"value":{"id":"c0283b95-d9ed-4afb-9d33-213a1ba8de7c","type":"divider","created_time":1712472171268,"last_edited_time":1712472171269,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"c0478f94-e2b5-4003-b190-2a26bccc83e4":{"value":{"id":"c0478f94-e2b5-4003-b190-2a26bccc83e4","type":"sub_sub_header","properties":{"title":[["总结"]]},"created_time":1712461275625,"last_edited_time":1712472337350,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"df82e571-9bf7-40e9-adc1-9c2d119592a3":{"value":{"id":"df82e571-9bf7-40e9-adc1-9c2d119592a3","type":"bulleted_list","properties":{"title":[["jstack可以，但是dump下来的堆栈文件不好排查"]]},"created_time":1712461278220,"last_edited_time":1712461297729,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"10da8870-dd5f-40e6-8bee-a048642ab34e":{"value":{"id":"10da8870-dd5f-40e6-8bee-a048642ab34e","type":"bulleted_list","properties":{"title":[["我还是常用arthas"]]},"created_time":1712461297894,"last_edited_time":1712461305998,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"97e63c42-f48e-4301-bf7f-c2a29bc2a427":{"value":{"id":"97e63c42-f48e-4301-bf7f-c2a29bc2a427","type":"bulleted_list","properties":{"title":[["预防更重要，要写监控程序。发现cpu占用异常立马保存现场，看故障程度来判断是否会滚上线，或者立马热部署注释掉代码"]]},"created_time":1712461306311,"last_edited_time":1712461423327,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"04e79f4a-3ff2-4cd4-874e-049da7999133":{"value":{"id":"04e79f4a-3ff2-4cd4-874e-049da7999133","type":"sub_header","properties":{"title":[["5.QPS压测性能测试指标。"]]},"format":{"copied_from_pointer":{"id":"a6bf00e4-3c7b-45c1-99b6-f43c65762c94","table":"block","spaceId":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"}},"created_time":1712330131919,"last_edited_time":1712457958300,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true,"copied_from":"a6bf00e4-3c7b-45c1-99b6-f43c65762c94"}},"e3c38c8c-73f0-4030-b52d-f92bd0b74e14":{"value":{"id":"e3c38c8c-73f0-4030-b52d-f92bd0b74e14","type":"sub_sub_header","properties":{"title":[["gpt问答"]]},"created_time":1712472339490,"last_edited_time":1712472343281,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"e4310e1b-9fe3-4ba2-a5a4-fcabd8c3e8a7":{"value":{"id":"e4310e1b-9fe3-4ba2-a5a4-fcabd8c3e8a7","type":"quote","properties":{"title":[["QPS压测性能测试指标主要是什么"]]},"created_time":1712468959848,"last_edited_time":1712472177695,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"8391f8e0-c28a-4e27-be95-5c2d02f5384a":{"value":{"id":"8391f8e0-c28a-4e27-be95-5c2d02f5384a","type":"text","properties":{"title":[["QPS（Queries Per Second）压力测试主要关注以下性能指标："]]},"created_time":1712469025954,"last_edited_time":1712469025958,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"b7b21474-7cae-4bbc-985a-e817143a02db":{"value":{"id":"b7b21474-7cae-4bbc-985a-e817143a02db","type":"numbered_list","properties":{"title":[["吞吐量（Throughput）",[["b"]]],["：在单位时间内处理的请求数量，通常以QPS（Queries Per Second）或TPS（Transactions Per Second）来衡量。"]]},"created_time":1712469025954,"last_edited_time":1712469025958,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"c30c7587-6292-4d8a-994d-0b631260225e":{"value":{"id":"c30c7587-6292-4d8a-994d-0b631260225e","type":"numbered_list","properties":{"title":[["响应时间（Response Time）",[["b"]]],["：从发送请求到接收到响应的时间，包括网络传输时间和服务器处理时间。通常来说，响应时间越短，用户体验越好。"]]},"created_time":1712469025954,"last_edited_time":1712469025958,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"00fcfcaa-ae9c-4e08-999d-1710bf58f5a4":{"value":{"id":"00fcfcaa-ae9c-4e08-999d-1710bf58f5a4","type":"numbered_list","properties":{"title":[["并发用户数（Concurrent Users）",[["b"]]],["：同时发出请求的用户数。大并发用户数可能导致服务器资源耗尽，性能下降。"]]},"created_time":1712469025954,"last_edited_time":1712469025958,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"aede14bc-f845-44ec-94e4-7effcdaaf9ed":{"value":{"id":"aede14bc-f845-44ec-94e4-7effcdaaf9ed","type":"numbered_list","properties":{"title":[["错误率（Error Rate）",[["b"]]],["：在压力测试中，请求失败的比例。这包括任何类型的错误，如HTTP错误、超时、异常等。"]]},"created_time":1712469025954,"last_edited_time":1712469025958,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"28bbc8ed-e2d7-4b87-8504-916aa6ff4e7a":{"value":{"id":"28bbc8ed-e2d7-4b87-8504-916aa6ff4e7a","type":"numbered_list","properties":{"title":[["资源使用率（Resource Utilization）",[["b"]]],["：包括CPU使用率、内存使用率、磁盘I/O、网络I/O等。这些指标可以帮助找出系统的瓶颈。"]]},"created_time":1712469025954,"last_edited_time":1712469025958,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"eba70797-ef1c-48b4-b02b-8869bd85b211":{"value":{"id":"eba70797-ef1c-48b4-b02b-8869bd85b211","type":"numbered_list","properties":{"title":[["可扩展性（Scalability）",[["b"]]],["：随着负载增加，系统能否保持性能和稳定性。"]]},"created_time":1712469025954,"last_edited_time":1712469025958,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"f9b561c0-2b14-4824-a3b6-a2c4809eff36":{"value":{"id":"f9b561c0-2b14-4824-a3b6-a2c4809eff36","type":"numbered_list","properties":{"title":[["稳定性（Stability）",[["b"]]],["：在高负载下，系统是否能稳定运行。"]]},"created_time":1712469025954,"last_edited_time":1712469025958,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"e1eb809b-af82-4723-af64-c532810872ea":{"value":{"id":"e1eb809b-af82-4723-af64-c532810872ea","type":"text","properties":{"title":[["以上指标都可以帮助我们评估系统的性能状况，找到可能的瓶颈，以进行优化。"]]},"created_time":1712469025954,"last_edited_time":1712469025958,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"1137beea-f2c8-4cd9-8693-44a93692d434":{"value":{"id":"1137beea-f2c8-4cd9-8693-44a93692d434","type":"divider","created_time":1712472183241,"last_edited_time":1712472183242,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"f991032b-b60c-4ae9-8c9b-7d32949d2f7d":{"value":{"id":"f991032b-b60c-4ae9-8c9b-7d32949d2f7d","type":"text","created_time":1712472183263,"last_edited_time":1712472183263,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"13531aff-c0c4-4cc7-8e1c-2eed1676410c":{"value":{"id":"13531aff-c0c4-4cc7-8e1c-2eed1676410c","type":"quote","properties":{"title":[["给我写个ab压力测试"]]},"created_time":1712469100173,"last_edited_time":1712469105836,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"111b754e-7a75-473f-90b5-2db448844e12":{"value":{"id":"111b754e-7a75-473f-90b5-2db448844e12","type":"text","properties":{"title":[["ab",[["c"]]],[" 是 Apache HTTP server benchmarking tool，主要用于进行 HTTP 性能测试。以下是使用 "],["ab",[["c"]]],[" 压测你提供的 GET 请求 30 秒的命令："]]},"created_time":1712469122327,"last_edited_time":1712469122332,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"5afed718-548d-45de-b28b-a46a9aa2e66b":{"value":{"id":"5afed718-548d-45de-b28b-a46a9aa2e66b","type":"code","properties":{"title":[["ab -n 1000 -c 10 -t 30  -H 'Host: x.x.cn:90' -H 'Connection: close' -H 'Content-IDType: application/json;charset=UTF-8' -H 'X-Access-Token: 1' -H 'User-Agent: android' -H 'Sign: 1' -H 'Dersion: 3.6.0' -H 'Timestamp: 1' -H 'Accept-Encoding: gzip' '<http://x.cn/x/x/x>'"]],"language":[["Shell"]]},"format":{"code_wrap":true},"created_time":1712469122327,"last_edited_time":1712469180105,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"648222d9-e9c4-4ed7-a08d-3d38f9059916":{"value":{"id":"648222d9-e9c4-4ed7-a08d-3d38f9059916","type":"text","properties":{"title":[["在这个命令中："]]},"created_time":1712469122327,"last_edited_time":1712469122332,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"b0a02fbc-f4c6-46b5-b0c3-9c5a4b36ff14":{"value":{"id":"b0a02fbc-f4c6-46b5-b0c3-9c5a4b36ff14","type":"bulleted_list","properties":{"title":[["n 1000",[["c"]]],[" 表示总共发送 1000 个请求。你可以根据实际情况调整这个数字。"]]},"created_time":1712469122328,"last_edited_time":1712469122332,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"76fc53b3-c188-4b2c-87ad-e2d6d26bbf3b":{"value":{"id":"76fc53b3-c188-4b2c-87ad-e2d6d26bbf3b","type":"bulleted_list","properties":{"title":[["c 10",[["c"]]],[" 表示并发数为 10。你可以根据实际情况调整这个数字。"]]},"created_time":1712469122328,"last_edited_time":1712469122332,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"2ec16a82-a6f7-43ef-a884-a1e4f41b4da7":{"value":{"id":"2ec16a82-a6f7-43ef-a884-a1e4f41b4da7","type":"bulleted_list","properties":{"title":[["t 30",[["c"]]],[" 表示压测时间为 30 秒。"]]},"created_time":1712469122328,"last_edited_time":1712469122332,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"babaf346-e95d-4986-aa26-63e8a722e8e3":{"value":{"id":"babaf346-e95d-4986-aa26-63e8a722e8e3","type":"bulleted_list","properties":{"title":[["H",[["c"]]],[" 用于添加 HTTP 头。"]]},"created_time":1712469122328,"last_edited_time":1712469122332,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"c3d119bb-2706-4412-aadf-1396bd9d9d61":{"value":{"id":"c3d119bb-2706-4412-aadf-1396bd9d9d61","type":"text","properties":{"title":[["注意，由于 "],["ab",[["c"]]],[" 不支持自动处理 HTTP 重定向、cookie 和其他一些 HTTP 功能，如果你的测试需要这些功能，你可能需要使用其他的工具，比如 "],["siege",[["c"]]],["、"],["wrk",[["c"]]],[" 或者 "],["jmeter",[["c"]]],["。"]]},"created_time":1712469122328,"last_edited_time":1712469253426,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"981f9577-c11c-4f30-9f8c-b04717719062":{"value":{"id":"981f9577-c11c-4f30-9f8c-b04717719062","type":"divider","created_time":1712472197690,"last_edited_time":1712472197691,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"1ee7c1f6-a405-4acd-8cf1-f3cb95af82aa":{"value":{"id":"1ee7c1f6-a405-4acd-8cf1-f3cb95af82aa","type":"text","created_time":1712472197715,"last_edited_time":1712472197715,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"181040ac-e8a6-43bd-8319-63f756025176":{"value":{"id":"181040ac-e8a6-43bd-8319-63f756025176","type":"quote","properties":{"title":[["给我一个gateway网关流量录制的方式，我想放大100倍去压测测试环境"]]},"created_time":1712469385546,"last_edited_time":1712472195431,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"5b6b1b35-50dd-4458-bbb8-bd0d849e83e2":{"value":{"id":"5b6b1b35-50dd-4458-bbb8-bd0d849e83e2","type":"text","properties":{"title":[["一个流行的方法是通过抓取生产环境的实际请求，并将其用于压测。具体步骤如下："]]},"created_time":1712469399474,"last_edited_time":1712469399479,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"c91fc763-ebeb-48bc-8860-2d91288bc4b9":{"value":{"id":"c91fc763-ebeb-48bc-8860-2d91288bc4b9","type":"numbered_list","properties":{"title":[["流量捕捉",[["b"]]],["：在生产环境的网关上捕获流量。你可以使用如tcpdump或Wireshark这样的工具来捕获流量。"]]},"created_time":1712469399474,"last_edited_time":1712469399479,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"af0f8549-1fed-4650-bded-b9bb221c9c4b":{"value":{"id":"af0f8549-1fed-4650-bded-b9bb221c9c4b","type":"numbered_list","properties":{"title":[["流量解析",[["b"]]],["：将捕获的流量转换为可重播的请求。你可以使用如Goreplay或者其他自定义脚本来做这个工作。"]]},"created_time":1712469399474,"last_edited_time":1712469399479,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"48c7d257-f510-443a-86b6-6247dabc5d54":{"value":{"id":"48c7d257-f510-443a-86b6-6247dabc5d54","type":"numbered_list","properties":{"title":[["流量生成",[["b"]]],["：使用一个压力测试工具，如Locust、JMeter或Gatling，来重播这些请求。你可以将请求频率调整为原来的100倍，以达到你的压测目标。"]]},"created_time":1712469399475,"last_edited_time":1712469399479,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"c412884b-7870-45dd-a85e-3712521fecb2":{"value":{"id":"c412884b-7870-45dd-a85e-3712521fecb2","type":"text","properties":{"title":[["以下是一个使用GoReplay进行流量录制和重放的示例："]]},"created_time":1712469399475,"last_edited_time":1712469399479,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"55790aca-34e8-40a7-9d2a-a2c836cc108e":{"value":{"id":"55790aca-34e8-40a7-9d2a-a2c836cc108e","type":"code","properties":{"title":[["# 在生产环境，使用GoReplay捕捉流量并保存到文件\nsudo ./gor --input-raw :80 --output-file=requests.gor\n\n# 在测试环境，使用GoReplay读取文件，并将流量放大100倍重放\n./gor --input-file requests.gor --output-http \"http://your_test_env\" --input-file-loop --speed 100\n"]],"language":[["Shell"]]},"format":{"code_wrap":true},"created_time":1712469399475,"last_edited_time":1712469399479,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"4ebead90-4ba0-4bbd-affa-838d137c0558":{"value":{"id":"4ebead90-4ba0-4bbd-affa-838d137c0558","type":"text","properties":{"title":[["注意，这只是一个基本示例。你可能需要根据你的实际环境和需求进行调整。此外，这种方法可能会暴露敏感信息，所以在处理请求数据时需要特别注意。"]]},"created_time":1712469399475,"last_edited_time":1712469409376,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"8318a2ff-315f-4878-afda-5d039731aa17":{"value":{"id":"8318a2ff-315f-4878-afda-5d039731aa17","type":"divider","created_time":1712472208413,"last_edited_time":1712472208415,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"b4932eae-48b8-4bc8-9701-619f23c311cb":{"value":{"id":"b4932eae-48b8-4bc8-9701-619f23c311cb","type":"sub_sub_header","properties":{"title":[["总结"]]},"created_time":1712469404112,"last_edited_time":1712472348559,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"91224e1c-6b9f-4359-a38f-bc27e4afcf68":{"value":{"id":"91224e1c-6b9f-4359-a38f-bc27e4afcf68","type":"bulleted_list","properties":{"title":[["性能指标都老生常谈了RT之类"]]},"created_time":1712469415759,"last_edited_time":1712469541356,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"3fff129c-1117-4542-b74d-4216082349c1":{"value":{"id":"3fff129c-1117-4542-b74d-4216082349c1","type":"bulleted_list","properties":{"title":[["ab测试特别方便，简单的压测可以使用"]]},"created_time":1712469541573,"last_edited_time":1712469563979,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"1e79e7fc-1c9b-4f42-b4de-6200dd902330":{"value":{"id":"1e79e7fc-1c9b-4f42-b4de-6200dd902330","type":"bulleted_list","properties":{"title":[["Goreplay",[["b"]]],["这个工具用来做流量录制，回放"]]},"created_time":1712469564118,"last_edited_time":1712469649488,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"2b7c4ded-eb4e-4989-b597-a7f15bfbc1f9":{"value":{"id":"2b7c4ded-eb4e-4989-b597-a7f15bfbc1f9","type":"sub_header","properties":{"title":[["6.性能优化经验"]]},"format":{"copied_from_pointer":{"id":"39c5adc4-bbe0-4733-8f3f-189c152564fc","table":"block","spaceId":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"}},"created_time":1712330131919,"last_edited_time":1712469380635,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true,"copied_from":"39c5adc4-bbe0-4733-8f3f-189c152564fc"}},"2ebb5714-fe8a-49dd-af34-0f2a183ca813":{"value":{"id":"2ebb5714-fe8a-49dd-af34-0f2a183ca813","type":"sub_sub_header","properties":{"title":[["gpt问答"]]},"created_time":1712472221774,"last_edited_time":1712472351830,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"220f2229-574f-425e-a4d3-53280a83ecd6":{"value":{"id":"220f2229-574f-425e-a4d3-53280a83ecd6","type":"quote","properties":{"title":[["SpringCloudAlibaba + redis + mysql8.0 + es + rabbitMQ我的项目用的这些技术栈，给我一点性能优化经验"]]},"created_time":1712469741223,"last_edited_time":1712472214209,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"702def13-5953-42b1-81ee-6d71058bc9e1":{"value":{"id":"702def13-5953-42b1-81ee-6d71058bc9e1","type":"text","properties":{"title":[["优化一个系统通常涉及许多不同的领域，包括但不限于：数据库优化、缓存策略、消息队列设计、搜索引擎优化、并发和负载均衡策略等。在你的具体情况下，这里有一些可能的优化策略："]]},"created_time":1712469785437,"last_edited_time":1712469785444,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"ae12cab0-c367-4874-a2a4-a90e2b449781":{"value":{"id":"ae12cab0-c367-4874-a2a4-a90e2b449781","type":"numbered_list","properties":{"title":[["SpringCloudAlibaba",[["b"]]],[": 你可以通过使用熔断器和服务降级来提高系统的可用性和稳定性。同时，异步调用和线程池的合理使用也可以提高系统性能。"]]},"created_time":1712469785437,"last_edited_time":1712469785444,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"8e2d18d1-7da5-4e00-a06d-937e959c1f7f":{"value":{"id":"8e2d18d1-7da5-4e00-a06d-937e959c1f7f","type":"numbered_list","properties":{"title":[["Redis",[["b"]]],[": 你可以考虑使用 Redis 作为缓存来减少数据库的压力。但是要注意，不是所有的数据都适合存储在 Redis 中。你需要根据业务需求来确定哪些数据应该被缓存。"]]},"created_time":1712469785437,"last_edited_time":1712469785444,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"3fc7d29d-036d-4fc8-a9a2-66dc3062ad2f":{"value":{"id":"3fc7d29d-036d-4fc8-a9a2-66dc3062ad2f","type":"numbered_list","properties":{"title":[["MySQL 8.0",[["b"]]],[": 对于 MySQL， 最好的优化策略通常包括合理的索引设计、SQL 查询优化和合理的数据库结构设计。你还可以考虑使用分区表和分片来进一步提高性能。"]]},"created_time":1712469785437,"last_edited_time":1712469785444,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"d75d5510-534f-4dbd-a03a-f7bfa8140882":{"value":{"id":"d75d5510-534f-4dbd-a03a-f7bfa8140882","type":"numbered_list","properties":{"title":[["Elasticsearch (ES)",[["b"]]],[": 对于 ES，你可以通过合理的索引和查询优化来提高搜索性能。此外，对于大量的数据，你可以考虑使用分片和副本来提高性能和可用性。"]]},"created_time":1712469785437,"last_edited_time":1712469785444,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"5fa79268-046a-46e4-b1a9-445889e59825":{"value":{"id":"5fa79268-046a-46e4-b1a9-445889e59825","type":"numbered_list","properties":{"title":[["RabbitMQ",[["b"]]],[": RabbitMQ 的优化通常包括合理的队列设计、消息确认机制和消费者并发策略。你也可以考虑使用消息批量处理和消息预取来提高性能。"]]},"created_time":1712469785438,"last_edited_time":1712469785444,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"8d9c9638-ed06-4d10-ab7e-99bb10cb5e02":{"value":{"id":"8d9c9638-ed06-4d10-ab7e-99bb10cb5e02","type":"numbered_list","properties":{"title":[["代码层面",[["b"]]],[": 对于代码本身，你可以考虑使用性能分析工具（如 JProfiler）来找出性能瓶颈。此外，合理的数据结构和算法设计，以及减少不必要的 I/O 操作也可以提高性能。"]]},"created_time":1712469785438,"last_edited_time":1712469785444,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"3c442da6-7fa9-48ba-9bfd-202d119dcead":{"value":{"id":"3c442da6-7fa9-48ba-9bfd-202d119dcead","type":"text","properties":{"title":[["以上就是一些常见的性能优化策略，但是需要注意的是，每个系统都是不同的，所以你需要根据你的具体情况来确定最合适的优化策略。在优化系统之前，最好先进行性能测试和分析，这样可以帮助你找出系统的瓶颈并确定优化的重点。"]]},"created_time":1712469785438,"last_edited_time":1712469944687,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"8bce32e8-78f8-442e-814c-327c9931cf38":{"value":{"id":"8bce32e8-78f8-442e-814c-327c9931cf38","type":"divider","created_time":1712472231976,"last_edited_time":1712472231977,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"407494ed-c9cf-4338-bc00-15789be41faf":{"value":{"id":"407494ed-c9cf-4338-bc00-15789be41faf","type":"sub_sub_header","properties":{"title":[["总结"]]},"created_time":1712469886357,"last_edited_time":1712472355347,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"ae0bc6d7-cb6f-464f-a49e-85370dc299f2":{"value":{"id":"ae0bc6d7-cb6f-464f-a49e-85370dc299f2","type":"bulleted_list","properties":{"title":[["gpt说话太宽泛了"]]},"created_time":1712469948300,"last_edited_time":1712469958237,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"2a68b08c-2705-4b2f-9dc1-921f92f77441":{"value":{"id":"2a68b08c-2705-4b2f-9dc1-921f92f77441","type":"bulleted_list","properties":{"title":[["主要可以从mysql入手，先把慢查询给压下来，主要就是加索引，分析索引为什么不生效，用explain命令查看扫描行数。进阶一点的就是更改数据库的事务隔离级别，听说RC更适合高并发，没有深入研究过。"]]},"created_time":1712469958481,"last_edited_time":1712470333167,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"01cfff21-e786-4686-be21-7baf28fdb9d9":{"value":{"id":"01cfff21-e786-4686-be21-7baf28fdb9d9","type":"bulleted_list","properties":{"title":[["mysql搞完了再去看看能不能上redis缓存，把热点流量走缓存，这里要分析下缓存的复杂度"]]},"created_time":1712470082212,"last_edited_time":1712470124422,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"daac458c-4d09-4bc7-b9dc-a7814d0d766d":{"value":{"id":"daac458c-4d09-4bc7-b9dc-a7814d0d766d","type":"bulleted_list","properties":{"title":[["再来就是jvm了，我不熟悉这些方面的内容。但是可以去arthas看看GC次数，堆大小。然后去问gpt是否正常，或者看看文章。分析出频繁GC的原因。"]]},"created_time":1712470126264,"last_edited_time":1712470211254,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"3f183d14-7dca-4a22-9ab7-f5e2c82cae19":{"value":{"id":"3f183d14-7dca-4a22-9ab7-f5e2c82cae19","type":"bulleted_list","properties":{"title":[["还有就是编程的潜意识，就是文件都走oss不要服务器直接接收，大对象redis反序列化特别占用cpu能不能用hashmap。for循环调用IO相关的能不能一次性batch先缓存起来…"]]},"created_time":1712470211481,"last_edited_time":1712470422375,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"5d19c63f-c2a4-414a-80f2-db216a5d3fa4":{"value":{"id":"5d19c63f-c2a4-414a-80f2-db216a5d3fa4","type":"sub_header","properties":{"title":[["7.线程任务有20概率失败如何保证100成功。"]]},"format":{"copied_from_pointer":{"id":"a6c237cd-5c47-4088-b5a6-d07c51cfd216","table":"block","spaceId":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"}},"created_time":1712330131919,"last_edited_time":1712457963211,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true,"copied_from":"a6c237cd-5c47-4088-b5a6-d07c51cfd216"}},"4b26b44c-1854-4809-a711-aba6d7edd59e":{"value":{"id":"4b26b44c-1854-4809-a711-aba6d7edd59e","type":"sub_sub_header","properties":{"title":[["gpt问答"]]},"created_time":1712472236185,"last_edited_time":1712472358525,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"456fdfde-bb2d-45da-906f-453d1a0a0408":{"value":{"id":"456fdfde-bb2d-45da-906f-453d1a0a0408","type":"quote","properties":{"title":[["java语言，线程任务有20概率失败如何保证100成功"]]},"created_time":1712470527395,"last_edited_time":1712470527584,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"b8f7f7c7-9b97-4113-bfce-e38edb0a8dbf":{"value":{"id":"b8f7f7c7-9b97-4113-bfce-e38edb0a8dbf","type":"text","properties":{"title":[["在Java中，要实现线程任务有20%的概率失败，但最终保证100%的成功，我们需要使用一种重试机制。以下是一个简单的例子："]]},"created_time":1712470533191,"last_edited_time":1712470533204,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"5abc3a42-0b85-421e-8275-364e1329278b":{"value":{"id":"5abc3a42-0b85-421e-8275-364e1329278b","type":"code","properties":{"title":[["import java.util.Random;\n\npublic class RetryTask implements Runnable {\n    private static final int MAX_RETRY_TIMES = 5;\n    private Random random = new Random();\n\n    @Override\n    public void run() {\n        boolean success = false;\n        int retryTimes = 0;\n        while (!success && retryTimes < MAX_RETRY_TIMES) {\n            try {\n                success = doTask();\n            } catch (Exception e) {\n                retryTimes++;\n                System.out.println(\"Task failed, retrying...\" + retryTimes);\n            }\n        }\n        if (success) {\n            System.out.println(\"Task finished successfully.\");\n        } else {\n            System.out.println(\"Task failed after \" + MAX_RETRY_TIMES + \" attempts.\");\n        }\n    }\n\n    // This is the task that has a 20% chance to fail\n    private boolean doTask() throws Exception {\n        int n = random.nextInt(5);\n        if (n == 0) {\n            throw new Exception(\"Task failed\");\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        RetryTask task = new RetryTask();\n        Thread thread = new Thread(task);\n        thread.start();\n    }\n}\n"]],"language":[["Java"]]},"format":{"code_wrap":true},"created_time":1712470533198,"last_edited_time":1712470533204,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"bd770ff4-40f3-4731-9e6f-e6ee9fa08fd9":{"value":{"id":"bd770ff4-40f3-4731-9e6f-e6ee9fa08fd9","type":"text","properties":{"title":[["在这个例子中，我们定义了一个任务，该任务有20%的概率失败（"],["doTask",[["c"]]],[" 方法每次都会生成一个0到4的随机数，如果数字是0，那么任务就会失败）。在任务失败后，我们会尝试重新执行任务，最多重试5次。如果在5次尝试后任务仍然失败，我们就会停止执行。"]]},"created_time":1712470533198,"last_edited_time":1712470533204,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"a265558f-d19a-4027-bf58-db597e0821f1":{"value":{"id":"a265558f-d19a-4027-bf58-db597e0821f1","type":"divider","created_time":1712472243344,"last_edited_time":1712472243345,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"96e98ae1-758a-4edd-990a-20e57dc88d56":{"value":{"id":"96e98ae1-758a-4edd-990a-20e57dc88d56","type":"text","created_time":1712472243366,"last_edited_time":1712472243366,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"559d843e-c38f-457f-9a3a-b013addb5358":{"value":{"id":"559d843e-c38f-457f-9a3a-b013addb5358","type":"quote","properties":{"title":[["你这个是业务上的考量，我考虑是线程池的拒绝策略和等待队列设置不合理。要保证每一个任务进入都要被执行，包括执行途中服务器重启"]]},"created_time":1712470729322,"last_edited_time":1712472246327,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"da124448-3f64-4e39-930a-3c1bb34e6f93":{"value":{"id":"da124448-3f64-4e39-930a-3c1bb34e6f93","type":"text","properties":{"title":[["理解你的问题了。如果你想要确保线程池中的所有任务在出现失败或者服务器重启的情况下仍然可以被执行，你需要结合线程池的配置策略和持久化存储来实现。"]]},"created_time":1712470738031,"last_edited_time":1712470738040,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"ffb87317-1efc-4275-a207-98c224873242":{"value":{"id":"ffb87317-1efc-4275-a207-98c224873242","type":"text","properties":{"title":[["首先，我们需要使用一个合适的拒绝策略。默认情况下，Java的线程池提供了四种拒绝策略："]]},"created_time":1712470738031,"last_edited_time":1712470738040,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"5035a8d6-c052-4a61-86b3-97fffda749f5":{"value":{"id":"5035a8d6-c052-4a61-86b3-97fffda749f5","type":"numbered_list","properties":{"title":[["AbortPolicy：直接抛出异常，阻止系统正常运行。"]]},"created_time":1712470738031,"last_edited_time":1712470738040,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"24290ce7-4674-4d85-8b91-237589163392":{"value":{"id":"24290ce7-4674-4d85-8b91-237589163392","type":"numbered_list","properties":{"title":[["CallerRunsPolicy：只用调用者所在的线程来运行任务。"]]},"created_time":1712470738031,"last_edited_time":1712470738040,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"5b42e21f-39be-4995-b9ab-932bda846ff4":{"value":{"id":"5b42e21f-39be-4995-b9ab-932bda846ff4","type":"numbered_list","properties":{"title":[["DiscardOldestPolicy：丢弃队列里最老的一个任务，然后尝试把当前任务加入队列。"]]},"created_time":1712470738031,"last_edited_time":1712470738040,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"40d6c976-ad3e-4c16-a7b9-db7c81ed61c5":{"value":{"id":"40d6c976-ad3e-4c16-a7b9-db7c81ed61c5","type":"numbered_list","properties":{"title":[["DiscardPolicy：直接丢弃任务，不予任何处理。"]]},"created_time":1712470738031,"last_edited_time":1712470738040,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"ba812b10-ec82-4659-95be-64c7c3dd0679":{"value":{"id":"ba812b10-ec82-4659-95be-64c7c3dd0679","type":"text","properties":{"title":[["在你的情况下，如果线程池满了，我们可以选择"],["CallerRunsPolicy",[["c"]]],["策略，这样新的任务就会在调用者线程中执行，这样可以保证不会丢失任务。"]]},"created_time":1712470738032,"last_edited_time":1712470738040,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"311ac43b-4c0e-4d70-9b5a-de42107126e3":{"value":{"id":"311ac43b-4c0e-4d70-9b5a-de42107126e3","type":"text","properties":{"title":[["其次，为了保证服务器重启后还能继续执行任务，我们需要把任务持久化存储。在任务开始执行前，我们需要把任务的信息存储在一个持久化的存储系统（比如数据库）中。然后每次任务执行完成后，我们需要更新这个任务在数据库中的状态。如果服务器重启，我们可以在服务器启动的时候，从数据库中获取未完成的任务，然后再次提交这些任务到线程池中执行。"]]},"created_time":1712470738032,"last_edited_time":1712470738040,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"53a0914a-757f-47b8-8ea7-38da041281a1":{"value":{"id":"53a0914a-757f-47b8-8ea7-38da041281a1","type":"text","properties":{"title":[["这样，我们就可以确保每个任务都能被执行，即使在服务器重启的情况下也能恢复执行。但是这种方案的实现比较复杂，需要结合线程池、数据库等多个技术。"]]},"created_time":1712470738032,"last_edited_time":1712470738040,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"81e93f64-ceec-4abb-ae75-5cff3959dc5d":{"value":{"id":"81e93f64-ceec-4abb-ae75-5cff3959dc5d","type":"divider","created_time":1712472251654,"last_edited_time":1712472251655,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"b62318d2-b560-4d9d-96d3-e94c6b06cc78":{"value":{"id":"b62318d2-b560-4d9d-96d3-e94c6b06cc78","type":"text","created_time":1712472251674,"last_edited_time":1712472251674,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"7f4a3fab-c74c-428c-89ba-43137bb10cb7":{"value":{"id":"7f4a3fab-c74c-428c-89ba-43137bb10cb7","type":"quote","properties":{"title":[["给我java代码，持久化选redis，你直接使用redisTemplate就ok，线程池的声明也要一起给我"]]},"created_time":1712470839436,"last_edited_time":1712472253913,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"7146a165-c3c3-4efd-838b-601e8643f55c":{"value":{"id":"7146a165-c3c3-4efd-838b-601e8643f55c","type":"text","properties":{"title":[["这是一个基础的示例，展示了如何使用Redis和线程池来确保任务的执行。这个示例使用了Spring框架的"],["RedisTemplate",[["c"]]],["和"],["ThreadPoolTaskExecutor",[["c"]]],["。"]]},"created_time":1712470975886,"last_edited_time":1712470975890,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"1413b7cb-5927-4f20-b160-39771f569d38":{"value":{"id":"1413b7cb-5927-4f20-b160-39771f569d38","type":"code","properties":{"title":[["import org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n\nimport java.util.concurrent.ThreadPoolExecutor;\n\n@Component\npublic class TaskManager {\n\n    @Autowired\n    private RedisTemplate<String, Runnable> redisTemplate;\n\n    private ThreadPoolTaskExecutor executor;\n\n    public TaskManager() {\n        executor = new ThreadPoolTaskExecutor();\n        executor.setCorePoolSize(5);\n        executor.setMaxPoolSize(10);\n        executor.setQueueCapacity(100);\n        executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());\n        executor.initialize();\n    }\n\n    public void submitTask(Runnable task) {\n        // Save task to Redis before submitting\n        redisTemplate.opsForList().leftPush(\"taskQueue\", task);\n        executor.execute(() -> {\n            task.run();\n            // Remove task from Redis after successful execution\n            redisTemplate.opsForList().remove(\"taskQueue\", 0, task);\n        });\n    }\n\n    public void recoverTasks() {\n        // Fetch tasks from Redis and submit them for execution\n        Long size = redisTemplate.opsForList().size(\"taskQueue\");\n        for (int i = 0; i < size; i++) {\n            Runnable task = redisTemplate.opsForList().rightPop(\"taskQueue\");\n            if (task != null) {\n                submitTask(task);\n            }\n        }\n    }\n}\n"]],"language":[["Java"]]},"format":{"code_wrap":true},"created_time":1712470975886,"last_edited_time":1712470975890,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"ca899d05-efde-4ce6-bdcb-98a0c6d29096":{"value":{"id":"ca899d05-efde-4ce6-bdcb-98a0c6d29096","type":"text","properties":{"title":[["注意这个示例只是一个基础的示例，实际使用时需要根据你的应用的需求来进行修改和优化。例如，你可能需要把任务的状态和结果也存储在Redis中，以便在任务执行完成后能获取到任务的结果。同时，这个示例也没有处理Redis和线程池的异常，你需要根据你的应用的需求来添加相应的异常处理代码。"]]},"created_time":1712470975886,"last_edited_time":1712470975890,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"12748c2a-db4e-498f-835d-726826a93f3c":{"value":{"id":"12748c2a-db4e-498f-835d-726826a93f3c","type":"divider","created_time":1712472261112,"last_edited_time":1712472261113,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"8bace18c-ec1d-40d4-9ee5-e3b380686397":{"value":{"id":"8bace18c-ec1d-40d4-9ee5-e3b380686397","type":"sub_sub_header","properties":{"title":[["总结"]]},"format":{"copied_from_pointer":{"id":"86f3eb3e-290c-49fd-9d12-3e3fc607f077","table":"block","spaceId":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"}},"created_time":1712470969377,"last_edited_time":1712472364776,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"1e324593-62b4-4a0e-a565-2bf69d4dc6f8":{"value":{"id":"1e324593-62b4-4a0e-a565-2bf69d4dc6f8","type":"bulleted_list","properties":{"title":[["最后gpt给出的答案中，拒绝策略用的CallerRunsPolicy，但好在任务执行入口里面包装了持久化策略"]]},"created_time":1712470985932,"last_edited_time":1712471222407,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"4edec3cd-49b4-4126-b098-0609bee2c2e5":{"value":{"id":"4edec3cd-49b4-4126-b098-0609bee2c2e5","type":"bulleted_list","properties":{"title":[["任务的事务性在这里面是没有考虑的"]]},"created_time":1712471222593,"last_edited_time":1712471244240,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"6ea42de6-a4de-41e1-a041-7b46c38f0e2d":{"value":{"id":"6ea42de6-a4de-41e1-a041-7b46c38f0e2d","type":"bulleted_list","properties":{"title":[["从线程池机制和业务机制做双重拦截"]]},"created_time":1712471247739,"last_edited_time":1712471264523,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"9e578a30-9fb1-4576-96ee-ae152f298c2b":{"value":{"id":"9e578a30-9fb1-4576-96ee-ae152f298c2b","type":"bulleted_list","properties":{"title":[["其实变相的写了一个mq出来，不如用mq"]]},"created_time":1712471266124,"last_edited_time":1712471276801,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"70dcfb86-db56-4aef-896a-2fbf70b58a9b":{"value":{"id":"70dcfb86-db56-4aef-896a-2fbf70b58a9b","type":"sub_header","properties":{"title":[["8.Neo4j,DGraph,GanusGraph图数据库"]]},"format":{"copied_from_pointer":{"id":"86f3eb3e-290c-49fd-9d12-3e3fc607f077","table":"block","spaceId":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"}},"created_time":1712330131919,"last_edited_time":1712471299943,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true,"copied_from":"86f3eb3e-290c-49fd-9d12-3e3fc607f077"}},"4d584daa-14ac-4e9c-85d0-c133fec59503":{"value":{"id":"4d584daa-14ac-4e9c-85d0-c133fec59503","type":"sub_sub_header","properties":{"title":[["gpt问答"]]},"created_time":1712472367212,"last_edited_time":1712472369946,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"676bf588-6f39-4f98-80f6-76fa817846a9":{"value":{"id":"676bf588-6f39-4f98-80f6-76fa817846a9","type":"quote","properties":{"title":[["图数据库是什么，我只用过mysql和redis。给我对比下Neo4j,DGraph,GanusGraph"]]},"created_time":1712334476089,"last_edited_time":1712472268561,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"5b82e23c-c3a9-49ae-8327-5854869fd29f":{"value":{"id":"5b82e23c-c3a9-49ae-8327-5854869fd29f","type":"text","properties":{"title":[["图数据库是一种专门用于处理图形数据的数据库。图形数据是一种复杂的数据类型，其中的元素是节点（Nodes）和边（Edges）。节点代表实体（例如人、地点、产品等），而边则代表这些实体之间的关系。"]]},"created_time":1712471469643,"last_edited_time":1712471469647,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"9d783fb5-f77e-4fcb-bf77-67e14c1acfbe":{"value":{"id":"9d783fb5-f77e-4fcb-bf77-67e14c1acfbe","type":"text","properties":{"title":[["与传统的关系型数据库（如 MySQL）和键值存储（如 Redis）相比，图数据库的主要优点在于它们可以高效地处理复杂的多对多关系。在关系型数据库中，这种关系往往需要通过多个表进行联接（JOIN）操作来处理，而这在大规模数据中会变得非常低效。而在图数据库中，这种关系是直接存储在数据库中的，因此可以非常快速地进行查询。"]]},"created_time":1712471469643,"last_edited_time":1712471469647,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"be79a372-398f-4ff7-a218-d3970205a93b":{"value":{"id":"be79a372-398f-4ff7-a218-d3970205a93b","type":"text","properties":{"title":[["以下是你提到的三个图数据库（Neo4j、Dgraph和JanusGraph）的简单对比："]]},"created_time":1712471469643,"last_edited_time":1712471469647,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"834eea56-b6ff-4ad3-a74d-5cee91f0773c":{"value":{"id":"834eea56-b6ff-4ad3-a74d-5cee91f0773c","type":"bulleted_list","properties":{"title":[["Neo4j",[["b"]]],[": 是最知名的图数据库之一，提供了丰富的图处理功能和一个强大的查询语言（Cypher）。Neo4j 还提供了一系列的高级功能，如全文搜索、权限管理和空间函数。但是，Neo4j 是一个基于 JVM 的产品，因此可能需要比其他某些数据库更多的系统资源。"]]},"created_time":1712471469643,"last_edited_time":1712471469647,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"01145d63-bbe5-43f9-a39d-1fc088ff79ed":{"value":{"id":"01145d63-bbe5-43f9-a39d-1fc088ff79ed","type":"bulleted_list","properties":{"title":[["Dgraph",[["b"]]],[": 是一个分布式的、可扩展的、事务性的图数据库，它的设计目标是为 Google 的知识图谱提供实时服务。Dgraph 提供了一种类似于 GraphQL 的查询语言，并支持 ACID 事务。相比于 Neo4j，Dgraph 的一个优点在于其分布式的特性，使其可以更好地处理大规模的图数据。"]]},"created_time":1712471469643,"last_edited_time":1712471469647,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"c52bffb0-8001-4654-b0b3-75d6198b9d7c":{"value":{"id":"c52bffb0-8001-4654-b0b3-75d6198b9d7c","type":"bulleted_list","properties":{"title":[["JanusGraph",[["b"]]],[": 是一个可以扩展的图数据库，支持多个后端存储（如 Apache Cassandra、Apache HBase 和 Google Cloud Bigtable），并支持全局图查询。JanusGraph 的一个主要优点在于其插件化的架构，使得它可以灵活地适配不同的后端存储和索引技术。"]]},"created_time":1712471469643,"last_edited_time":1712471469647,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"4c359f4a-1ecb-408a-bfb1-be69a6db3ded":{"value":{"id":"4c359f4a-1ecb-408a-bfb1-be69a6db3ded","type":"text","properties":{"title":[["以上这些图数据库各有优缺点，选择哪一个最适合你，取决于你的具体需求和偏好。"]]},"created_time":1712471469643,"last_edited_time":1712471469647,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"9aa0ad95-e940-4174-a98d-2b0a667730fa":{"value":{"id":"9aa0ad95-e940-4174-a98d-2b0a667730fa","type":"divider","created_time":1712472275064,"last_edited_time":1712472275065,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"e2e33cef-5ad5-4ca7-93c4-21cc283a25b9":{"value":{"id":"e2e33cef-5ad5-4ca7-93c4-21cc283a25b9","type":"text","created_time":1712471497005,"last_edited_time":1712471497005,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"4ffe24ce-ee7b-43f6-99fc-65df6af3ec63":{"value":{"id":"4ffe24ce-ee7b-43f6-99fc-65df6af3ec63","type":"quote","properties":{"title":[["给我举一个使用图数据库的具体案例，并且给我java代码"]]},"created_time":1712471498509,"last_edited_time":1712472279230,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"f6515904-8e88-4d15-9397-f9c17e9cbf73":{"value":{"id":"f6515904-8e88-4d15-9397-f9c17e9cbf73","type":"text","properties":{"title":[["图数据库在许多领域都有应用，例如社交网络、"],["推荐系统",[["b"]]],["、生物信息学等。这里我将给你一个简单的社交网络的案例。"]]},"created_time":1712471628360,"last_edited_time":1712471634956,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"ffccf9aa-8cc1-4165-97e0-dd089cf8bb8e":{"value":{"id":"ffccf9aa-8cc1-4165-97e0-dd089cf8bb8e","type":"text","properties":{"title":[["假设我们有一个社交网络，我们想要找出两个用户之间的最短路径（也就是他们之间的关系链）。我们可以使用 Neo4j 图数据库来存储和查询这个社交网络。"]]},"created_time":1712471628360,"last_edited_time":1712471628368,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"685f6334-f314-4b13-93a7-0ab05c990939":{"value":{"id":"685f6334-f314-4b13-93a7-0ab05c990939","type":"text","properties":{"title":[["这是一段使用 Neo4j Java API 来创建节点和关系，并查询两个节点之间的最短路径的代码。"]]},"created_time":1712471628360,"last_edited_time":1712471628368,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"775c6317-b272-4ff8-b863-9ba7ddf5c963":{"value":{"id":"775c6317-b272-4ff8-b863-9ba7ddf5c963","type":"text","properties":{"title":[["首先，添加 Maven 依赖："]]},"created_time":1712471628360,"last_edited_time":1712471628368,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"f0a53d9e-a460-4527-b030-c16c8cc6f19b":{"value":{"id":"f0a53d9e-a460-4527-b030-c16c8cc6f19b","type":"code","properties":{"title":[["<dependencies>\n  <dependency>\n    <groupId>org.neo4j.driver</groupId>\n    <artifactId>neo4j-java-driver</artifactId>\n    <version>4.0.1</version>\n  </dependency>\n</dependencies>"]],"language":[["XML"]]},"format":{"code_wrap":true},"created_time":1712471628363,"last_edited_time":1712472284792,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"8757d938-7b43-4c38-95e8-c7ec1fc7a2e4":{"value":{"id":"8757d938-7b43-4c38-95e8-c7ec1fc7a2e4","type":"text","properties":{"title":[["然后，这是 Java 代码："]]},"created_time":1712471628363,"last_edited_time":1712471628368,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"1392cc6d-45ac-48d6-b550-1ce3c2c8c24c":{"value":{"id":"1392cc6d-45ac-48d6-b550-1ce3c2c8c24c","type":"code","properties":{"title":[["import org.neo4j.driver.*;\n\npublic class Neo4jExample {\n    public static void main(String[] args) {\n        Driver driver = GraphDatabase.driver(\"bolt://localhost:7687\", AuthTokens.basic(\"neo4j\", \"password\"));\n\n        try (Session session = driver.session()) {\n            // 创建节点和关系\n            session.writeTransaction(tx -> {\n                tx.run(\"CREATE (alice:Person {name: 'Alice'})\");\n                tx.run(\"CREATE (bob:Person {name: 'Bob'})\");\n                tx.run(\"CREATE (charlie:Person {name: 'Charlie'})\");\n                tx.run(\"MATCH (a:Person), (b:Person) WHERE a.name = 'Alice' AND b.name = 'Bob' CREATE (a)-[:KNOWS]->(b)\");\n                tx.run(\"MATCH (a:Person), (b:Person) WHERE a.name = 'Bob' AND b.name = 'Charlie' CREATE (a)-[:KNOWS]->(b)\");\n                return null;\n            });\n\n            // 查询 Alice 到 Charlie 的最短路径\n            session.readTransaction(tx -> {\n                Result result = tx.run(\"MATCH (a:Person {name: 'Alice'}), (b:Person {name: 'Charlie'}), p = shortestPath((a)-[:KNOWS*..5]-(b)) RETURN p\");\n                while (result.hasNext()) {\n                    Record record = result.next();\n                    System.out.println(record.get(\"p\").asPath());\n                }\n                return null;\n            });\n        }\n\n        driver.close();\n    }\n}\n"]],"language":[["Java"]]},"format":{"code_wrap":true},"created_time":1712471628363,"last_edited_time":1712471628368,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"96e8deac-6e4c-449a-86ec-53e7f4bc6c20":{"value":{"id":"96e8deac-6e4c-449a-86ec-53e7f4bc6c20","type":"text","properties":{"title":[["在这个例子中，我们首先创建了三个节点（Alice、Bob 和 Charlie），然后创建了两个关系（Alice 知道 Bob，Bob 知道 Charlie）。然后，我们使用 "],["shortestPath",[["c"]]],[" 函数来查询 Alice 到 Charlie 的最短路径。"]]},"created_time":1712471628363,"last_edited_time":1712471628368,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"8d99ce35-fbaa-45e9-a05a-f0567aba31d8":{"value":{"id":"8d99ce35-fbaa-45e9-a05a-f0567aba31d8","type":"text","properties":{"title":[["注意，这个例子假设你已经在本地运行了 Neo4j，并且用户名和密码分别是 \"neo4j\" 和 \"password\"。你也需要在你的 Maven 项目中添加 Neo4j Java driver 的依赖。"]]},"created_time":1712471628363,"last_edited_time":1712471628368,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"7f371d94-8eec-47c6-a856-8c062783c6b2":{"value":{"id":"7f371d94-8eec-47c6-a856-8c062783c6b2","type":"divider","created_time":1712472294046,"last_edited_time":1712472294047,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"fc0a74bc-a96e-4d6f-971c-b5513c1462ee":{"value":{"id":"fc0a74bc-a96e-4d6f-971c-b5513c1462ee","type":"sub_sub_header","properties":{"title":[["总结"]]},"created_time":1712471709899,"last_edited_time":1712472375114,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"0e56365b-5f4e-467a-8c3f-0b3efa1d307e":{"value":{"id":"0e56365b-5f4e-467a-8c3f-0b3efa1d307e","type":"bulleted_list","properties":{"title":[["对比关系型数据库和kv数据库，图形数据库高效处理复杂的多对多关系"]]},"created_time":1712471712272,"last_edited_time":1712471773204,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"4069f7aa-52d2-4e1b-bace-27d77e694cf0":{"value":{"id":"4069f7aa-52d2-4e1b-bace-27d77e694cf0","type":"bulleted_list","properties":{"title":[["neo4j基于jvm的，这个可以着重关注下"]]},"created_time":1712471800985,"last_edited_time":1712471812276,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"ccde5138-86f6-4b49-b355-b91c5873c1bd":{"value":{"id":"ccde5138-86f6-4b49-b355-b91c5873c1bd","type":"bulleted_list","properties":{"title":[["社交网络、推荐系统可以使用图数据库"]]},"created_time":1712471812432,"last_edited_time":1712471847202,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"bbdfee63-aff2-49c4-9fe9-4fcbd2e095ac":{"value":{"id":"bbdfee63-aff2-49c4-9fe9-4fcbd2e095ac","type":"bulleted_list","properties":{"title":[["最短路径问题案例，确实使用sql来写很麻烦，要多次io"]]},"created_time":1712471847366,"last_edited_time":1712471873432,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true}},"c9344dda-c117-4fb1-9b1a-094e94d4258f":{"value":{"id":"c9344dda-c117-4fb1-9b1a-094e94d4258f","type":"header","properties":{"title":[["写到最后"]]},"format":{"copied_from_pointer":{"id":"5cde9219-8710-4037-9848-8a1f37dc9ff6","table":"block","spaceId":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"}},"created_time":1712329960849,"last_edited_time":1712329960849,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true,"copied_from":"5cde9219-8710-4037-9848-8a1f37dc9ff6"}},"9a7f8507-04ff-40b4-908a-d18bb90a9935":{"value":{"id":"9a7f8507-04ff-40b4-908a-d18bb90a9935","type":"column_list","content":["36dbfd7f-df86-4f94-b94f-7440f8035d02","355a3f83-4be7-4a13-bf89-74180036a8ca","6f2a06ed-b84b-47c5-8941-7fb8a7e022c0"],"format":{"copied_from_pointer":{"id":"60dbcaaf-f103-4bb0-9be1-817671709d79","table":"block","spaceId":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"}},"created_time":1712329960849,"last_edited_time":1712329960849,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true,"copied_from":"60dbcaaf-f103-4bb0-9be1-817671709d79"}},"36dbfd7f-df86-4f94-b94f-7440f8035d02":{"value":{"id":"36dbfd7f-df86-4f94-b94f-7440f8035d02","type":"column","content":["76a650ee-0d62-46a1-b87d-0b7644365acc"],"format":{"column_ratio":0.25,"copied_from_pointer":{"id":"235500f7-fd62-4fe9-b6d2-b67bac3f464d","table":"block","spaceId":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"}},"created_time":1712329960849,"last_edited_time":1712329960849,"parent_id":"9a7f8507-04ff-40b4-908a-d18bb90a9935","parent_table":"block","alive":true,"copied_from":"235500f7-fd62-4fe9-b6d2-b67bac3f464d"}},"355a3f83-4be7-4a13-bf89-74180036a8ca":{"value":{"id":"355a3f83-4be7-4a13-bf89-74180036a8ca","type":"column","content":["7f064ccd-7fe5-43a3-8244-b2ae572e3dca","75bd07f5-0978-441e-8f52-1afd644bef9d"],"format":{"column_ratio":0.34601449275362306,"copied_from_pointer":{"id":"0439e06e-c3f8-4170-ba05-29b7ff61d8a0","table":"block","spaceId":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"}},"created_time":1712329960849,"last_edited_time":1712329960849,"parent_id":"9a7f8507-04ff-40b4-908a-d18bb90a9935","parent_table":"block","alive":true,"copied_from":"0439e06e-c3f8-4170-ba05-29b7ff61d8a0"}},"6f2a06ed-b84b-47c5-8941-7fb8a7e022c0":{"value":{"id":"6f2a06ed-b84b-47c5-8941-7fb8a7e022c0","type":"column","content":["b54428ae-8121-43f4-9e49-e7721bb7e23c"],"format":{"column_ratio":0.4039855072463767,"copied_from_pointer":{"id":"2db937b6-5aae-440c-a285-8be50e3b5e55","table":"block","spaceId":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"}},"created_time":1712329960850,"last_edited_time":1712329960850,"parent_id":"9a7f8507-04ff-40b4-908a-d18bb90a9935","parent_table":"block","alive":true,"copied_from":"2db937b6-5aae-440c-a285-8be50e3b5e55"}},"7f064ccd-7fe5-43a3-8244-b2ae572e3dca":{"value":{"id":"7f064ccd-7fe5-43a3-8244-b2ae572e3dca","type":"text","properties":{"title":[["\n",[["i"]]],["        是在往前走就好",[["i"],["b"]]],["\n        ",[["i"]]],["bothsavage.github.io",[["a","https://bothsavage.github.io/archive"],["i"]]],["\n",[["i"]]]]},"format":{"copied_from_pointer":{"id":"01338c9e-9395-42fa-858b-73431aab37fa","table":"block","spaceId":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"}},"created_time":1712329960850,"last_edited_time":1712329960850,"parent_id":"355a3f83-4be7-4a13-bf89-74180036a8ca","parent_table":"block","alive":true,"copied_from":"01338c9e-9395-42fa-858b-73431aab37fa"}},"76a650ee-0d62-46a1-b87d-0b7644365acc":{"value":{"id":"76a650ee-0d62-46a1-b87d-0b7644365acc","type":"image","properties":{"size":[["980.0KB"]],"title":[["favicon.png"]],"source":[["https://prod-files-secure.s3.us-west-2.amazonaws.com/eb3e1328-8f32-4ff5-8d18-8ea80020e175/e74a26b9-10d9-49f3-9ea7-bcb2a1438bd7/favicon.png"]]},"format":{"block_width":144,"display_source":"https://prod-files-secure.s3.us-west-2.amazonaws.com/eb3e1328-8f32-4ff5-8d18-8ea80020e175/e74a26b9-10d9-49f3-9ea7-bcb2a1438bd7/favicon.png","block_full_width":false,"block_page_width":true,"block_aspect_ratio":1,"copied_from_pointer":{"id":"97938c4a-3571-4bef-b055-178812ea72c6","table":"block","spaceId":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"},"block_preserve_scale":true},"created_time":1712329960850,"last_edited_time":1712329960850,"parent_id":"36dbfd7f-df86-4f94-b94f-7440f8035d02","parent_table":"block","alive":true,"copied_from":"97938c4a-3571-4bef-b055-178812ea72c6","file_ids":["e74a26b9-10d9-49f3-9ea7-bcb2a1438bd7"]}},"b54428ae-8121-43f4-9e49-e7721bb7e23c":{"value":{"id":"b54428ae-8121-43f4-9e49-e7721bb7e23c","type":"image","properties":{"size":[["85.8KB"]],"title":[["Untitled"]],"source":[["https://prod-files-secure.s3.us-west-2.amazonaws.com/eb3e1328-8f32-4ff5-8d18-8ea80020e175/3436ffe0-3684-445a-824f-2fd9fa5ad2a6/Untitled.png"]]},"format":{"block_width":288,"block_height":315,"display_source":"https://prod-files-secure.s3.us-west-2.amazonaws.com/eb3e1328-8f32-4ff5-8d18-8ea80020e175/3436ffe0-3684-445a-824f-2fd9fa5ad2a6/Untitled.png","block_full_width":false,"block_page_width":true,"block_aspect_ratio":0.525,"copied_from_pointer":{"id":"4ac99a1d-7b5a-4420-a756-a9131f055bd0","table":"block","spaceId":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"},"block_preserve_scale":true},"created_time":1712329960850,"last_edited_time":1712329960850,"parent_id":"6f2a06ed-b84b-47c5-8941-7fb8a7e022c0","parent_table":"block","alive":true,"copied_from":"4ac99a1d-7b5a-4420-a756-a9131f055bd0","file_ids":["3436ffe0-3684-445a-824f-2fd9fa5ad2a6"]}},"75bd07f5-0978-441e-8f52-1afd644bef9d":{"value":{"id":"75bd07f5-0978-441e-8f52-1afd644bef9d","type":"text","format":{"copied_from_pointer":{"id":"5e9529ea-6019-4fc2-84b6-796d696ac4fd","table":"block","spaceId":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"}},"created_time":1712329960850,"last_edited_time":1712329960850,"parent_id":"355a3f83-4be7-4a13-bf89-74180036a8ca","parent_table":"block","alive":true,"copied_from":"5e9529ea-6019-4fc2-84b6-796d696ac4fd"}},"7898d291-822b-4935-a99c-bcab5e9c026c":{"value":{"id":"7898d291-822b-4935-a99c-bcab5e9c026c","type":"text","format":{"copied_from_pointer":{"id":"d23c967c-579a-4a00-81be-5b5255a47a8a","table":"block","spaceId":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"}},"created_time":1712329960849,"last_edited_time":1712329960849,"parent_id":"63830328-e0f0-477a-b327-bc4ab921f89c","parent_table":"block","alive":true,"copied_from":"d23c967c-579a-4a00-81be-5b5255a47a8a"}}},"collection":{"3c6ddc29-47df-43f6-a375-de1c3a9cf466":{"value":{"id":"3c6ddc29-47df-43f6-a375-de1c3a9cf466","version":21,"name":[["Both Savage"]],"description":[["一个NotionNext搭建的博客"]],"schema":{"@NcA":{"name":"password","type":"text"},"Dj]h":{"name":"icon","type":"text"},"NX\\Q":{"name":"date","type":"date","date_format":"YYYY/MM/DD"},"`gQ~":{"name":"type","type":"select","options":[{"id":"5aff2f95-fd1e-489b-8840-bf10bc9519cb","color":"purple","value":"Post"},{"id":"374d2bc6-a144-4832-8ca4-474aaae0ea1f","color":"orange","value":"Page"},{"id":"95b7fea5-98b3-476e-892f-79e8f36d0633","color":"brown","value":"Notice"},{"id":"2287395b-9f64-4852-b46f-ff3df4b4acef","color":"yellow","value":"Menu"},{"id":"50fefd65-c28e-4806-9183-aa12995f11f3","color":"pink","value":"SubMenu"},{"id":"b945f57d-dbcc-4603-9fab-5cfe447aad1b","color":"red","value":"CONFIG"}]},"bB{M":{"name":"category","type":"select","options":[{"id":"a4dcd33a-34a7-4c33-b9c2-92d3a5248f06","color":"pink","value":"知行合一"},{"id":"8282ff59-f160-40c3-ab7e-6e970a0a64d5","color":"purple","value":"技术分享"},{"id":"edd604ab-fda7-4d9b-964a-e7de536c05a0","color":"orange","value":"心情随笔"},{"id":"9b3140e8-d1e6-414f-b86f-04f85b811596","color":"red","value":"未发布"},{"id":"c466d345-55bf-4155-a77e-fcd58819a455","color":"brown","value":"准备"},{"id":"350fdef0-67f5-4e99-a661-24fd57c306be","color":"green","value":"万里长征"}]},"d]hq":{"name":"slug","type":"text"},"sD^m":{"name":"tags","type":"multi_select","options":[{"id":"d9f66761-0396-4e80-be5c-2ab6c7f8ba86","color":"red","value":"推荐"},{"id":"ee932bde-0023-446f-9bb4-17d2022121c9","color":"brown","value":"文字"},{"id":"438bae9c-df52-4fb0-8288-791c5ee8625c","color":"yellow","value":"思考"},{"id":"4ae52b3d-6ee9-4af5-9b79-0b7644adf259","color":"orange","value":"新闻"},{"id":"25b1074b-a3fa-49f5-82cd-a37d85c5666f","color":"pink","value":"工具"},{"id":"1e90f00e-8f1b-4665-8e69-92f0791bde56","color":"pink","value":"开发"},{"id":"2382b30f-9881-4a8b-ae7f-2d34979c4fb9","color":"brown","value":"建站"},{"id":"569a8035-8738-40e8-a317-d6a6375f0b35","color":"green","value":"金钱"},{"id":"b39c0d81-6d40-4474-83fe-d8f44746a2d1","color":"pink","value":"健康"},{"id":"50765df4-40d8-4098-a1b4-abf97b9ce1d2","color":"gray","value":"docker"},{"id":"114a1313-d952-45e1-8bb5-8bf0b7d3c372","color":"blue","value":"自动化"},{"id":"986f04d2-1cd1-4f47-84ba-2c692e069d93","color":"purple","value":"折腾"},{"id":"88f6276a-b475-4a62-a2b6-438606516ec8","color":"default","value":"git"},{"id":"11c42291-5274-44a7-94a3-f4af3382896b","color":"red","value":"日志"},{"id":"e89abe8e-9228-48f8-8bb0-582d8343eb91","color":"red","value":"微服务"},{"id":"c002f5d1-02d9-41b0-954e-6f6a5978b3e0","color":"purple","value":"spring"},{"id":"9fb08037-26be-4513-a5b2-ada51bcfeb9c","color":"blue","value":"skywalking"},{"id":"4db60a02-14cd-40e9-bf53-0f4c30547a4b","color":"gray","value":"运维"},{"id":"bda76598-5cfc-492c-83ec-f17afb09b0c7","color":"orange","value":"linux"},{"id":"c52cafb9-814a-4408-b23f-d195d9fb314a","color":"orange","value":"脚本"},{"id":"531ca54d-1302-4bcf-83cc-b389e9d9a35e","color":"yellow","value":"面试"}]},"wz|S":{"name":"summary","type":"text"},"title":{"name":"title","type":"title"},"f211bdc0-ee00-4186-9a7d-f68c055ec2ee":{"name":"status","type":"select","options":[{"id":"7abc61d4-b405-480d-b699-12588755fa65","color":"red","value":"Published"},{"id":"d1242312-e0a8-456d-b8f0-6e998e2c4fb2","color":"orange","value":"Invisible"},{"id":"41d5f5c6-b53c-42bc-8e0f-fc9402048480","color":"yellow","value":"Draft"}]}},"icon":"https://prod-files-secure.s3.us-west-2.amazonaws.com/eb3e1328-8f32-4ff5-8d18-8ea80020e175/c5ebdc5a-c3fd-403e-906b-17d64db6d01f/favicon.ico","cover":"/images/page-cover/nasa_robert_stewart_spacewalk_2.jpg","format":{"copied_from_pointer":{"id":"9c953404-2685-4385-a433-b3ca351ebfbb","table":"collection","spaceId":"2a229231-539e-420a-9652-17ba8be4cd18"},"property_visibility":[{"property":"`gQ~","visibility":"show"},{"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee","visibility":"show"},{"property":"NX\\Q","visibility":"show"},{"property":"d]hq","visibility":"show"},{"property":"wz|S","visibility":"show"},{"property":"sD^m","visibility":"show"},{"property":"bB{M","visibility":"show"},{"property":"Dj]h","visibility":"hide_if_empty"},{"property":"uHoD","visibility":"show"},{"property":"kiCR","visibility":"hide"}],"collection_cover_position":0.3,"collection_page_properties":[{"visible":false,"property":"`gQ~"},{"visible":false,"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"visible":false,"property":"NX\\Q"},{"visible":false,"property":"d]hq"},{"visible":false,"property":"wz|S"},{"visible":false,"property":"sD^m"},{"visible":true,"property":"bB{M"},{"visible":true,"property":"Dj]h"},{"visible":true,"property":"@NcA"},{"visible":true,"property":"ckw_"}],"collection_default_template":{"template_page_id":"77f4d759-8660-4888-8d35-4214be459ba1"}},"parent_id":"87ff73a8-1273-4f5f-96c1-cd1becb07207","parent_table":"block","alive":true,"file_ids":["6cf3dc36-2f98-4f0e-9679-1bdbb1485129","5520bd92-e709-4c0d-ad58-06923f23f7e9","624d393a-62e3-4464-a1bf-1c79ecd4fbda","d52f6766-3e32-4c3d-8529-46e1f214360f","abe3a0aa-2aff-4274-81bb-c2443d4ef9e2","a2a32795-101d-46aa-a7f6-eb35b8750166","ebb540b3-6c46-422b-b2ed-f834e98fa189","c5ebdc5a-c3fd-403e-906b-17d64db6d01f"],"copied_from":"9c953404-2685-4385-a433-b3ca351ebfbb","template_pages":["77f4d759-8660-4888-8d35-4214be459ba1","fbea6284-6910-456b-9292-c62e080c9f59"],"migrated":true,"space_id":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"},"role":"comment_only"}},"space":{},"collection_view":{"8e40545c-4d1c-4299-8605-c04d7ab6872f":{"value":{"id":"8e40545c-4d1c-4299-8605-c04d7ab6872f","version":34,"type":"table","name":"Table","format":{"table_properties":[{"width":219,"visible":true,"property":"title"},{"width":222,"visible":true,"property":"wz|S"},{"width":100,"visible":true,"property":"`gQ~"},{"width":116,"visible":true,"property":"bB{M"},{"width":142,"visible":true,"property":"sD^m"},{"width":100,"visible":true,"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"width":155,"visible":true,"property":"d]hq"},{"width":111,"visible":true,"property":"NX\\Q"},{"width":100,"visible":true,"property":"@NcA"},{"width":117,"visible":true,"property":"Dj]h"}],"table_frozen_column_index":-1,"collection_view_default_template":{"template_page_id":"77f4d759-8660-4888-8d35-4214be459ba1"}},"parent_id":"87ff73a8-1273-4f5f-96c1-cd1becb07207","parent_table":"block","alive":true,"page_sort":["cc459e5b-0f15-4a0c-83db-bb6bf2001aa3","a9bfecc8-9761-4987-9aca-af79d4ebbd0c","7aa40ad8-1e69-4d56-b245-d135d3101cec","e4eefa7d-e2f2-44ed-83f6-fd6951d50900","0f9b7a0d-ad15-4ece-8a8b-948d96b50ff7","58a216ce-4d8d-4b60-906c-6097c5fd8d41","b824f35b-aee9-4a22-81c9-d44b65f99f43","ba565c08-0d2f-46cb-9fcb-5eeface44dfb","560c76dd-c69f-429b-827d-7974407bb23f","0533a861-81cc-40fa-8ab8-5be721800b86","3578fa31-ea0a-4e07-82dc-28704e0dc685","f2625c60-ca69-493b-858c-bf38979f468c","96b14e20-e592-42f6-b7d2-357f4693f18c","fe8fafec-6d1b-4fbb-8a7a-fb079a6bb8e4","9345db3a-b8bd-4e02-b296-9734958eddb6","26e8ddc4-10b4-4765-a96d-e87290556164","840f0871-b58b-428d-8a28-0861947974b4","5787bc4f-06a4-4158-a27f-6c81fb9b1efe","e1bff221-486f-42c8-9cf3-6379f83f3510","2db01777-47d0-4230-bbe8-ef65ab694707","ab0d5acb-9230-4656-9c49-1aff13aba865","98330ff5-71d2-4ea9-945a-ba76fc282e9d","c555dc5f-766e-4b6d-8adc-711dda06ca9e","f53bfc30-59bb-4890-ba28-0b045040aa5e","4fae0653-be7f-4e10-91de-344f6c6d0a6b","62779828-3770-4944-923d-0e0a307d9cfe","2caa6a98-fd82-4de7-838f-e08dfe6649ab","146219e7-c178-4485-b223-22f4b977333c","71879fde-4992-4276-9767-ac5bd71e4058","9a78ba09-76ce-4344-bad5-f6d60dc0680e","63830328-e0f0-477a-b327-bc4ab921f89c","4d955058-b605-46cf-b242-1535b732af30","9a11ddf0-58ae-4450-8583-5ba3e2108e0a","1b09c4fb-e51e-4b6f-96ea-d7a92ef051d9","e8fd9138-663d-415d-9684-24343fb3248f","e013510c-b3a7-4907-b4cd-118b118d30db","7e13a286-a275-4f48-b9d0-416c9b1368ce","38e3f997-dad9-46b8-99bb-d3042488821f","026c5c21-3604-4c0a-a13c-ccb9208e4815","ce6b6618-a118-4ee9-b74c-33a848d0f0ed","d3216be6-1b27-40e7-8677-7404896b7eb6","54d97ca6-33d5-40e6-8c8b-0ad4a4e9a0bf","df0db62b-d0ed-47f0-b5be-445bfef1f6af","3fb907b8-6154-452a-94f7-a018ba092632","041a3743-f888-4476-b947-fff856745c02","47aba706-2cde-4eef-9fb8-0cdd0f7805c9","93032c73-435f-4a73-8087-b71ecff3a86b","973ede9c-1a10-4482-be06-324fd481d34f","163026f4-445a-4595-936d-c0df491c3776","d43cadd5-38cc-48ce-a44d-188a8215cd7d","b4a852c3-8bab-43ef-b748-8dec9d0940f9","463a12f0-d5d5-4492-bb0f-8058cea32a41","95ddf5c1-569e-4c61-a1e8-6507fe59fc97","e02c27c7-0d8f-4899-ac46-99fcbde4d8e2","bb12e5eb-3f93-4fc7-ba98-c634aeab570c","4194acae-3f4b-4c08-98b9-907a0b5bd4b9","7197aec6-6a63-4199-be46-fe41dbe963bc","5263856d-837a-4f2d-bfc6-24cbff6c946c","7d53a42d-ea99-435e-b34c-b08a4c1d5d8d","07268062-6524-4c7a-a123-1bf8f2b1dc97","7b6c5022-b0db-4dc3-a38e-47cefabe2caf","535eb3f6-3ba4-436a-bb1a-98afa49aca4a","f3550fb0-346c-4212-b57f-86433738b50b","61e7385c-af01-4fb5-a3d1-20604e42144e","2255c884-c803-463b-86ed-ac605dbdb20d","07ffc04a-9fef-4589-93f1-7999e2ac60ff","6010106b-54da-4540-8532-04f407ec4543","1ffb90ba-821d-4d16-8520-e46604a470d7","adc7c47b-6dd7-439f-9e06-6075256c91a7","29e65d89-d04e-4ee3-9a9d-2f8856ed3055","d88da7cd-eebc-4c92-b9c3-53910376ab83","7d039e15-c906-470d-b781-943032713368","e746c4ee-0327-4529-85ac-7059a10091d3","898cec8f-fd58-426a-9065-696d924d6dd6","69787376-afa9-4f5b-9230-dbfcde06209d","9e017f37-5917-4cda-afb8-92072abdbdba","8aafeb2c-85b4-4c4e-af36-3b9efacb167c","6d0e0705-57f3-4223-8745-a27295245029","dec89a30-7004-499f-a99e-05b2842cad2b","7efc83d4-2645-4578-b588-a9cffb15524a","1769e8de-bebe-4687-a28a-34c15859ed98","203f2c30-a3cd-4f70-95b3-07df9f996428","2a0b435c-6f77-4db8-be6b-831d177bd762","eac01009-c323-46fd-8339-09c282e6597e","c4b37f96-4ab0-4a0b-a16e-55bac3e32990","4ad5c69e-0dab-4d66-b548-360da7d53568","72d89744-ac04-4dd4-be8b-9d629acd7c11","32dc3358-e954-4934-9e71-cf1dfbca5b91","961e45bd-8bed-4ebc-b3d8-1f0e63736d04"],"query2":{"aggregations":[{"property":"title","aggregator":"count"}]},"space_id":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"},"role":"comment_only"},"818d9fe2-a27d-40ec-b827-614939109ca4":{"value":{"id":"818d9fe2-a27d-40ec-b827-614939109ca4","version":2,"type":"gallery","format":{"gallery_cover":{"type":"page_cover"},"table_properties":[{"width":100,"visible":true,"property":"`gQ~"},{"width":116,"visible":true,"property":"bB{M"},{"width":142,"visible":true,"property":"sD^m"},{"width":219,"visible":true,"property":"title"},{"width":100,"visible":true,"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"width":155,"visible":true,"property":"d]hq"},{"width":352,"visible":true,"property":"wz|S"},{"width":111,"visible":true,"property":"NX\\Q"},{"width":100,"visible":true,"property":"@NcA"},{"width":117,"visible":true,"property":"Dj]h"}],"collection_groups":[{"value":{"type":"select","value":"心情随笔"},"property":"bB{M"},{"value":{"type":"select","value":"技术分享"},"property":"bB{M"},{"value":{"type":"select","value":"知行合一"},"property":"bB{M"},{"value":{"type":"select","value":"未发布"},"property":"bB{M"},{"value":{"type":"select","value":"面试准备"},"property":"bB{M"},{"value":{"type":"select"},"hidden":true,"property":"bB{M"}],"gallery_properties":[{"visible":true,"property":"title"},{"visible":true,"property":"NX\\Q"},{"visible":true,"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"visible":false,"property":"bB{M"},{"visible":false,"property":"Dj]h"},{"visible":false,"property":"@NcA"},{"visible":false,"property":"d]hq"},{"visible":false,"property":"wz|S"},{"visible":false,"property":"sD^m"},{"visible":false,"property":"`gQ~"}],"collection_group_by":{"sort":{"type":"manual"},"type":"select","property":"bB{M"},"table_subitem_toggle_column":"title"},"parent_id":"87ff73a8-1273-4f5f-96c1-cd1becb07207","parent_table":"block","alive":true,"space_id":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"},"role":"comment_only"},"ad494b39-a38c-415e-9221-325f0f9be280":{"value":{"id":"ad494b39-a38c-415e-9221-325f0f9be280","version":1,"type":"board","format":{"board_columns":[{"value":{"type":"select","value":"Draft"},"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"value":{"type":"select","value":"Invisible"},"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"value":{"type":"select","value":"Published"},"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"value":{"type":"select"},"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"}],"board_columns_by":{"sort":{"type":"manual"},"type":"select","property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},"board_properties":[{"visible":true,"property":"title"},{"visible":true,"property":"bB{M"},{"visible":true,"property":"sD^m"},{"visible":true,"property":"wz|S"},{"visible":false,"property":"NX\\Q"},{"visible":false,"property":"Dj]h"},{"visible":false,"property":"@NcA"},{"visible":false,"property":"d]hq"},{"visible":false,"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"visible":false,"property":"`gQ~"}],"table_properties":[{"width":100,"visible":true,"property":"`gQ~"},{"width":116,"visible":true,"property":"bB{M"},{"width":142,"visible":true,"property":"sD^m"},{"width":219,"visible":true,"property":"title"},{"width":100,"visible":true,"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"width":155,"visible":true,"property":"d]hq"},{"width":352,"visible":true,"property":"wz|S"},{"width":111,"visible":true,"property":"NX\\Q"},{"width":100,"visible":true,"property":"@NcA"},{"width":117,"visible":true,"property":"Dj]h"}],"table_subitem_toggle_column":"title"},"parent_id":"87ff73a8-1273-4f5f-96c1-cd1becb07207","parent_table":"block","alive":true,"space_id":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"},"role":"comment_only"},"58c6fb90-5030-4627-8bad-38b57c3253cd":{"value":{"id":"58c6fb90-5030-4627-8bad-38b57c3253cd","version":27,"type":"list","name":"","format":{"list_properties":[{"visible":true,"property":"NX\\Q"},{"visible":true,"property":"d]hq"},{"visible":true,"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"visible":true,"property":"sD^m"},{"visible":true,"property":"`gQ~"},{"visible":false,"property":"wz|S"},{"visible":false,"property":"bB{M"},{"visible":false,"property":"Dj]h"},{"visible":false,"property":"@NcA"}],"table_properties":[{"width":100,"visible":true,"property":"`gQ~"},{"width":116,"visible":true,"property":"bB{M"},{"width":142,"visible":true,"property":"sD^m"},{"width":219,"visible":true,"property":"title"},{"width":100,"visible":true,"property":"f211bdc0-ee00-4186-9a7d-f68c055ec2ee"},{"width":155,"visible":true,"property":"d]hq"},{"width":352,"visible":true,"property":"wz|S"},{"width":111,"visible":true,"property":"NX\\Q"},{"width":100,"visible":true,"property":"@NcA"},{"width":117,"visible":true,"property":"Dj]h"}],"collection_groups":[{"value":{"type":"select","value":"心情随笔"},"property":"bB{M"},{"value":{"type":"select","value":"技术分享"},"property":"bB{M"},{"value":{"type":"select","value":"知行合一"},"property":"bB{M"},{"value":{"type":"select"},"property":"bB{M"},{"value":{"type":"select","value":"未发布"},"hidden":false,"property":"bB{M"},{"value":{"type":"select","value":"准备"},"property":"bB{M"}],"collection_group_by":{"sort":{"type":"manual"},"type":"select","property":"bB{M"},"table_subitem_toggle_column":"title"},"parent_id":"87ff73a8-1273-4f5f-96c1-cd1becb07207","parent_table":"block","alive":true,"page_sort":["aac975a5-3e4f-4274-b064-aec9a24b48be","bb12e5eb-3f93-4fc7-ba98-c634aeab570c","69787376-afa9-4f5b-9230-dbfcde06209d","07268062-6524-4c7a-a123-1bf8f2b1dc97","4fae0653-be7f-4e10-91de-344f6c6d0a6b","163026f4-445a-4595-936d-c0df491c3776","973ede9c-1a10-4482-be06-324fd481d34f","47aba706-2cde-4eef-9fb8-0cdd0f7805c9","d43cadd5-38cc-48ce-a44d-188a8215cd7d","93032c73-435f-4a73-8087-b71ecff3a86b","041a3743-f888-4476-b947-fff856745c02","95ddf5c1-569e-4c61-a1e8-6507fe59fc97","463a12f0-d5d5-4492-bb0f-8058cea32a41","b4a852c3-8bab-43ef-b748-8dec9d0940f9","7d53a42d-ea99-435e-b34c-b08a4c1d5d8d","c555dc5f-766e-4b6d-8adc-711dda06ca9e","f53bfc30-59bb-4890-ba28-0b045040aa5e","5263856d-837a-4f2d-bfc6-24cbff6c946c","7b6c5022-b0db-4dc3-a38e-47cefabe2caf","d88da7cd-eebc-4c92-b9c3-53910376ab83","7d039e15-c906-470d-b781-943032713368","e746c4ee-0327-4529-85ac-7059a10091d3","29e65d89-d04e-4ee3-9a9d-2f8856ed3055","6234c1b0-c99f-4e13-892c-77dfbbb980dc","6619e16a-8a30-411e-a0d4-3fd724006c63","2e7ee7ca-e5f6-41ae-8886-cdcebbd52a5c","54d97ca6-33d5-40e6-8c8b-0ad4a4e9a0bf","d3216be6-1b27-40e7-8677-7404896b7eb6","3505b511-076b-47a7-aa1a-95e702c54e6b","ce6b6618-a118-4ee9-b74c-33a848d0f0ed","f6073c5c-d5a8-464d-90e1-2b13358989d7","463a3c80-4e43-42d9-b436-1299d00df6b2","026c5c21-3604-4c0a-a13c-ccb9208e4815","38e3f997-dad9-46b8-99bb-d3042488821f","7e13a286-a275-4f48-b9d0-416c9b1368ce","c400684e-4c92-4f33-a95c-fa250a356d9b"],"space_id":"eb3e1328-8f32-4ff5-8d18-8ea80020e175"},"role":"comment_only"}},"notion_user":{},"collection_query":{},"signed_urls":{}}},"prev":{"id":"9a78ba09-76ce-4344-bad5-f6d60dc0680e","date":{"start_date":"2024-04-08","date_format":"relative"},"type":"Post","category":"万里长征","slug":"article/240408-LM-02","tags":["面试","文字"],"summary":"跟谁学面试题","title":"万里长征-02-跟谁学","status":"Published","publishDate":1712534400000,"publishDay":"2024-4-8","lastEditedDate":"2024-04-08T17:08:09.011Z","lastEditedDay":"2024-4-9","fullWidth":false,"pageIcon":"🗒️","pageCover":"https://source.unsplash.com/random?t=9a78ba09-76ce-4344-bad5-f6d60dc0680e","pageCoverThumbnail":"https://source.unsplash.com/random?t=9a78ba09-76ce-4344-bad5-f6d60dc0680e","tagItems":[{"name":"面试","color":"yellow"},{"name":"文字","color":"brown"}],"password":""},"next":{"id":"4d955058-b605-46cf-b242-1535b732af30","date":{"start_date":"2024-04-05"},"type":"Post","category":"万里长征","slug":"article/240405-LM","tags":["面试","推荐"],"summary":"常见面试题汇总","title":"万里长征","status":"Published","publishDate":1712275200000,"publishDay":"2024-4-5","lastEditedDate":"2024-04-07T09:23:11.250Z","lastEditedDay":"2024-4-7","fullWidth":false,"pageIcon":"🗒️","pageCover":"","pageCoverThumbnail":"","tagItems":[{"name":"面试","color":"yellow"},{"name":"推荐","color":"red"}],"password":""},"recommendPosts":[{"id":"2caa6a98-fd82-4de7-838f-e08dfe6649ab","date":{"start_date":"2024-04-29","date_format":"relative"},"type":"Post","category":"万里长征","slug":"article/240429-LM-fox","tags":["面试"],"summary":"搜狐面试题","title":"万里长征-03-搜狐","status":"Published","publishDate":1714348800000,"publishDay":"2024-4-29","lastEditedDate":"2024-05-25T02:20:00.057Z","lastEditedDay":"2024-5-25","fullWidth":false,"pageIcon":"🗒️","pageCover":"","pageCoverThumbnail":"","tagItems":[{"name":"面试","color":"yellow"}],"password":""},{"id":"9a78ba09-76ce-4344-bad5-f6d60dc0680e","date":{"start_date":"2024-04-08","date_format":"relative"},"type":"Post","category":"万里长征","slug":"article/240408-LM-02","tags":["面试","文字"],"summary":"跟谁学面试题","title":"万里长征-02-跟谁学","status":"Published","publishDate":1712534400000,"publishDay":"2024-4-8","lastEditedDate":"2024-04-08T17:08:09.011Z","lastEditedDay":"2024-4-9","fullWidth":false,"pageIcon":"🗒️","pageCover":"https://source.unsplash.com/random?t=9a78ba09-76ce-4344-bad5-f6d60dc0680e","pageCoverThumbnail":"https://source.unsplash.com/random?t=9a78ba09-76ce-4344-bad5-f6d60dc0680e","tagItems":[{"name":"面试","color":"yellow"},{"name":"文字","color":"brown"}],"password":""},{"id":"4d955058-b605-46cf-b242-1535b732af30","date":{"start_date":"2024-04-05"},"type":"Post","category":"万里长征","slug":"article/240405-LM","tags":["面试","推荐"],"summary":"常见面试题汇总","title":"万里长征","status":"Published","publishDate":1712275200000,"publishDay":"2024-4-5","lastEditedDate":"2024-04-07T09:23:11.250Z","lastEditedDay":"2024-4-7","fullWidth":false,"pageIcon":"🗒️","pageCover":"","pageCoverThumbnail":"","tagItems":[{"name":"面试","color":"yellow"},{"name":"推荐","color":"red"}],"password":""}]},"__N_SSG":true}